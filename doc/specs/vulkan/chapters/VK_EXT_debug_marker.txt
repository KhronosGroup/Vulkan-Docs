= Debugging

Given the complexity of Vulkan there is a strong need for verbose debugging
information to aid the application developer in tracking down errors in the
application's use of Vulkan, particularly in combination with an external
debugger or profiler.

This extension adds five new commands that allow a flexible way for debugging
and validation layers to receive annotation and debug information.  An
application enables this extension by including ``VK_EXT_debug_marker'' in the
list of pname:ppEnabledExtensionNames at flink:vkCreateDevice. The Vulkan
implementation including layers indicating support will return
VK_EXT_debug_marker in the extension list queried via
flink:vkEnumerateDeviceExtensionProperties.

Details of the commands are listed in two sections, ``Object Annotation'' and
``Command Buffer Markers''  respectively. Object Annotation allows the
application to associate a name or binary data with a Vulkan object, while
command buffer markers provide the developer with a way of associating logical
elements of the scene with commands in the command buffer.


== Object Annotation

The commands in this section allow application developers to associate
user-defined information with Vulkan objects at will.

An object can be given a user-friendly name by calling:

include::../protos/vkDebugMarkerSetObjectNameEXT.txt[]

  * pname:device the device that created the object.
  * pname:objectType the type of the object to be named. Object types are
    defined by ename:VkDebugReportObjectTypeEXT.
  * pname:object is the object to be named.
  * pname:pName is a pointer to a null-terminated UTF-8 string that contains
    the name for the object.

include::../validity/protos/vkDebugMarkerSetObjectNameEXT.txt[]

Applications may: change the name associated with an object simply by
calling fname:vkDebugMarkerSetObjectNameEXT again with a new string. To
remove a previously set name, pName should be set to an empty string.

In addition to setting a name for an object, debugging and validation layers
may have uses for additional binary data on a per-object basis that has no
other place in the Vulkan API. For example, a sname:VkShaderModule could
have additional debugging data attached to it to aid in offline shader
tracing.

Arbitrary data can be attached to an object by calling:

include::../protos/vkDebugMarkerSetObjectTagEXT.txt[]

  * pname:device the device that created the object.
  * pname:objectType the type of the object to be tagged. Object types are
    defined by ename:VkDebugReportObjectTypeEXT.
  * pname:object is the object to be tagged.
  * pname:tagName is a numerical identifier of the tag.
  * pname:pTag is an array of pname:tagSize bytes containing the data to be
    associated with the object.

include::../validity/protos/vkDebugMarkerSetObjectTagEXT.txt[]

The pname:tagName parameter gives a name or identifier to the type of data
being tagged. This can be used by debugging layers to easily filter for only
data that can be used by that implementation.

Both of the above commands accept a pname:objectType parameter of type
ename:VkDebugReportObjectTypeEXT to determine what kind of object is passed
in the pname:object parameter. The enum is defined as:

include::../enums/VkDebugReportObjectTypeEXT.txt[]

The possible values are:

  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT is an unknown object.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT is a sname:VkInstance.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT is a sname:VkPhysicalDevice.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT is a sname:VkDevice.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT is a sname:VkQueue.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT is a sname:VkSemaphore.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT is a sname:VkCommandBuffer.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT is a sname:VkFence.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT is a sname:VkDeviceMemory.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT is a sname:VkBuffer.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT is a sname:VkImage.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT is a sname:VkEvent.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT is a sname:VkQueryPool.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT is a sname:VkBufferView.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT is a sname:VkImageView.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT is a sname:VkShaderModule.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT is a sname:VkPipelineCache.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT is a sname:VkPipelineLayout.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT is a sname:VkRenderPass.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT is a sname:VkPipeline.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT is a sname:VkDescriptorSetLayout.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT is a sname:VkSampler.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT is a sname:VkDescriptorPool.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT is a sname:VkDescriptorSet.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT is a sname:VkFramebuffer.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT is a sname:VkCommandPool.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT is a sname:VkSurfaceKHR.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT is a sname:VkSwapchainKHR.
  * ename:VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT is a sname:VkDebugReportCallbackEXT.


== Command Buffer Markers

Typical Vulkan applications will submit many command buffers in each frame,
with each command buffer containing a large number of individual commands.
Being able to logically annotate regions of command buffers that belong
together as well as hierarchically subdivide the frame is important to
a developer's ability to navigate the commands viewed holistically.

The marker commands fname:vkCmdDebugMarkerBeginEXT and
fname:vkCmdDebugMarkerEndEXT define regions of a series of commands that are
grouped together, and they can be nested to create a hierarchy. The
fname:vkCmdDebugMarkerInsertEXT command allows insertion of a single label
within a command buffer.

A marker region can be opened by calling:

include::../protos/vkCmdDebugMarkerBeginEXT.txt[]

  * pname:commandBuffer is the command buffer into which the command is
    recorded.
  * pname:pMarker is a pointer to a null-terminated UTF-8 string that
    contains the name of the region to open.

include::../validity/protos/vkCmdDebugMarkerBeginEXT.txt[]

A marker region can be closed by calling:

include::../protos/vkCmdDebugMarkerEndEXT.txt[]

  * pname:commandBuffer is the command buffer into which the command is
    recorded.

include::../validity/protos/vkCmdDebugMarkerEndEXT.txt[]

An application may: open a marker region in one command buffer and close it
in another, or otherwise split marker regions across multiple command
buffers or multiple queue submissions. When viewed from the linear series of
submissions to a single queue, the calls to fname:vkCmdDebugMarkerBeginEXT
and fname:vkCmdDebugMarkerEndEXT must: be matched and balanced.

Any calls to fname:vkCmdDebugMarkerBeginEXT within a secondary command
buffer must have a matching fname:vkCmdDebugMarkerEndEXT in that same
command buffer, and marker regions begun outside of the secondary command
buffer must not be ended inside it.

A single marker label can be inserted into a command buffer by calling:

include::../protos/vkCmdDebugMarkerInsertEXT.txt[]

  * pname:commandBuffer is the command buffer into which the command is
    recorded.
  * pname:pMarker is a pointer to a null-terminated UTF-8 string that
    contains the name of the marker to insert.

include::../validity/protos/vkCmdDebugMarkerInsertEXT.txt[]
