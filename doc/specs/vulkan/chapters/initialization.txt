// Copyright (c) 2015-2016 The Khronos Group Inc.
// Copyright notice at https://www.khronos.org/registry/speccopyright.html

[[initialization]]
= Initialization

Before using Vulkan, an application must: initialize it by loading the
Vulkan commands, and creating a sname:VkInstance object.

[[initialization-functionpointers]]
== Command Function Pointers

Vulkan commands are not necessarily exposed statically on a platform.
Function pointers for all Vulkan commands can: be obtained with the
command:

include::../protos/vkGetInstanceProcAddr.txt[]

  * pname:instance is the instance that the function pointer will be
    compatible with, or `NULL` for commands not dependent on any instance.
  * pname:pName is the name of the command to obtain.

include::../validity/protos/vkGetInstanceProcAddr.txt[]

fname:vkGetInstanceProcAddr itself is obtained in a platform- and loader-
specific manner. Typically, the loader library will export this command as a
function symbol, so applications can: link against the loader library, or
load it dynamically and look up the symbol using platform-specific APIs.
Loaders are encouraged to export function symbols for all other core
Vulkan commands as well; if this is done, then applications that use only
the core Vulkan commands have no need to use fname:vkGetInstanceProcAddr.

The table below defines the various use cases for fname:vkGetInstanceProcAddr
and expected behavior ("fp" is function pointer) for each case. Each rule
is tested in the order below.

.vkGetInstanceProcAddr behavior
[width="80%",options="header",align="center"]
|=====
| pname:instance | pname:pName | behavior
| invalid instance | * | undefined
| * | `NULL` | undefined
| `NULL` | flink:vkEnumerateInstanceExtensionProperties | returns fp
| `NULL` | flink:vkEnumerateInstanceLayerProperties | returns fp
| `NULL` | flink:vkCreateInstance | returns fp
| `NULL` | * (not any row/case above) | returns `NULL`
| instance | flink:vkEnumerateInstanceLayerProperties | `NULL`
| instance | flink:vkEnumerateInstanceExtensionProperties | `NULL`
| instance | flink:vkCreateInstance | `NULL`
| instance | core Vulkan command | returns fp (1)
| instance | enabled instance extension command for pname:instance | returns fp (1)
| instance | available device extension command for pname:instance | returns fp (1,2)
| instance | * (not any row/case above) | returns `NULL`
|=====

1) The returned function pointer must: only be called with a dispatchable object
(the first parameter) that is pname:instance or a child of pname:instance (
    i.e. sname:VkPhysicalDevice, sname:VkDevice, sname:VkQueue, or
    sname:VkCommandBuffer).

2) An available extension is an extension function supported by any of the loader, ICD or layer.

In order to support systems with multiple Vulkan implementations
comprising heterogeneous collections of hardware and software, the function
pointers returned by fname:vkGetInstanceProcAddr may: point to dispatch
code, which calls a different real implementation for different
sname:VkDevice objects (and objects created from them). The overhead of this
internal dispatch can: be avoided by obtaining device-specific function
pointers for any commands that use a device or device-child object as their
dispatchable object. Such function pointers can: be obtained with the
command:

include::../protos/vkGetDeviceProcAddr.txt[]

include::../validity/protos/vkGetDeviceProcAddr.txt[]

The table below defines the various use cases for fname:vkGetDeviceProcAddr
and expected behavior for each case, in the order defined by the table below.

.vkGetDeviceProcAddr behavior
[width="80%",options="header",align="center"]
|=====
| pname:device | pname:pName | behavior
| invalid device | * | undefined
| device | `NULL` | undefined
| device | core Vulkan command (1) | returns fp
| device | enabled device extension command for pname:device | returns fp
| device | * (not any row/case above) | returns `NULL`
|=====

1) pname:pName is the name of any Vulkan command whose first parameter
    is one of sname:VkDevice, sname:VkQueue, or sname:VkCommandBuffer.

[[initialization-instances]]
== Instances

There is no global state in Vulkan and all per-application state is
stored in a sname:VkInstance object. Creating a sname:VkInstance object
initializes the Vulkan library and allows the application to pass
information about itself to the implementation.

To create an instance object, call:

include::../protos/vkCreateInstance.txt[]

  * pname:pCreateInfo points to an instance of slink:VkInstanceCreateInfo
    controlling creation of the instance.
  * pname:pAllocator controls host memory allocation as described in the
    <<memory-allocation, Memory Allocation>> chapter.
  * pname:pInstance points a sname:VkInstance handle in which the resulting
    instance is returned.

include::../validity/protos/vkCreateInstance.txt[]

The sname:VkInstanceCreateInfo structure is defined as:

include::../structs/VkInstanceCreateInfo.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to an extension-specific structure.
  * pname:flags is reserved for future use.
  * pname:pApplicationInfo is `NULL` or a pointer to an instance of
    sname:VkApplicationInfo. If not `NULL`, this information helps
    implementations recognize behavior inherent to classes of applications.
    slink:VkApplicationInfo is defined in detail below.
  * pname:enabledLayerCount is the number of global layers to enable.
  * pname:ppEnabledLayerNames is a pointer to an array of
    pname:enabledLayerCount null-terminated UTF-8 strings containing the
    names of layers to enable for the created instance. See the
    <<extended-functionality-layers,Layers>> section for further details.
  * pname:enabledExtensionCount is the number of global extensions to
    enable.
  * pname:ppEnabledExtensionNames is a pointer to an array of
    pname:enabledExtensionCount null-terminated UTF-8 strings containing the
    names of extensions to enable.

include::../validity/structs/VkInstanceCreateInfo.txt[]

fname:vkCreateInstance creates the instance, then enables and initializes
global layers and extensions requested by the application. If an extension
is provided by a layer, both the layer and extension must: be specified at
fname:vkCreateInstance time. If a specified layer cannot be found, no
sname:VkInstance will be created and the function will return
ename:VK_ERROR_LAYER_NOT_PRESENT. Likewise, if a specified extension cannot be found
the call will return ename:VK_ERROR_EXTENSION_NOT_PRESENT.

The pname:pApplicationInfo member of slink:VkInstanceCreateInfo can: point
to an instance of sname:VkApplicationInfo.

The sname:VkApplicationInfo structure is defined as:

include::../structs/VkApplicationInfo.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to an extension-specific structure.
  * pname:pApplicationName is a pointer to a null-terminated UTF-8 string
    containing the name of the application.
  * pname:applicationVersion is an unsigned integer variable containing the
    developer-supplied version number of the application.
  * pname:pEngineName is a pointer to a null-terminated UTF-8 string
    containing the name of the engine (if any) used to create the
    application.
  * pname:engineVersion is an unsigned integer variable containing the
    developer-supplied version number of the engine used to create the
    application.
  * pname:apiVersion is the version of the Vulkan API against which the
    application expects to run, encoded as described in the
    <<fundamentals-versionnum,API Version Numbers and Semantics>> section.
    If pname:apiVersion is 0 the implementation must: ignore it, otherwise
    if the implementation does not support the requested pname:apiVersion it
    must: return ename:VK_ERROR_INCOMPATIBLE_DRIVER. The patch version number
    specified in pname:apiVersion is ignored when creating an instance
    object. Only the major and minor versions of the instance must: match
    those requested in pname:apiVersion.

include::../validity/structs/VkApplicationInfo.txt[]

To destroy an instance, call:

include::../protos/vkDestroyInstance.txt[]

  * pname:instance is the handle of the instance to destroy.
  * pname:pAllocator controls host memory allocation as described in the
    <<memory-allocation, Memory Allocation>> chapter.

include::../validity/protos/vkDestroyInstance.txt[]
