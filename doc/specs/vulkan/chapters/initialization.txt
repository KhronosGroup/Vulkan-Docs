// Copyright (c) 2015-2017 The Khronos Group Inc.
// Copyright notice at https://www.khronos.org/registry/speccopyright.html

[[initialization]]
= 初始化

在使用Vulkan之前，应用程序必须通过载入Vulkan命令和创建sname:VkInstance对象来初始化它。

[[initialization-functionpointers]]
== 命令函数的指针

// refBegin vkGetInstanceProcAddr Return a function pointer for a command

Vulkan命令在各平台上并不是静态的暴露出来的。可以通过以下命令来获取Vulkan命令的函数指针：

include::../api/protos/vkGetInstanceProcAddr.txt[]

  * pname:instance is the instance that the function pointer will be
    compatible with, or `NULL` for commands not dependent on any instance.
  * pname:pName 是需要获取的命令的名字。

fname:vkGetInstanceProcAddr 自己是通过平台和loader各异的方式获取的。通常，loader库将以函数符号的方式导出这个命令，
所以，应用程序可以链接到loader库，或者动态的载入并使用平台自己的API来寻找符号。
loader应导出其他所有的核心Vulkan命令；如果完成了，应用程序只使用核心的Vulkan命令，就没有必要使用fname:vkGetInstanceProcAddr了。

下面的表格定义了fname:vkGetInstanceProcAddr 各种使用场景和期待的返回值（fp 是函数指针）：

返回的函数指针是 tlink:PFN_vkVoidFunction 类型的，必须强制转换为查询所用的类型：

.vkGetInstanceProcAddr behavior
[width="80%",options="header"]
|====
| pname:instance   | pname:pName                                  | return value
| *                | `NULL`                                       | undefined
| invalid instance | *                                            | undefined
| `NULL`           | flink:vkEnumerateInstanceExtensionProperties | fp
| `NULL`           | flink:vkEnumerateInstanceLayerProperties     | fp
| `NULL`           | flink:vkCreateInstance                       | fp
| `NULL`           | * (any pname:pName not covered above)        | `NULL`
| instance         | core Vulkan command                          | fp^1^
| instance         | enabled instance extension commands for pname:instance    | fp^1^
| instance         | available device extension^2^ commands for pname:instance | fp^1^
| instance         | * (any pname:pName not covered above)        | `NULL`
|====

1::
    The returned function pointer must: only be called with a dispatchable
    object (the first parameter) that is pname:instance or a child of
    pname:instance.
    e.g. sname:VkInstance, sname:VkPhysicalDevice, sname:VkDevice,
    sname:VkQueue, or sname:VkCommandBuffer.

2::
    An "`available extension`" is an extension function supported by any of
    the loader, driver or layer.

include::../validity/protos/vkGetInstanceProcAddr.txt[]

// refEnd vkGetInstanceProcAddr PFN_vkVoidFunction

// refBegin vkGetDeviceProcAddr Return a function pointer for a command

为了支持有多个Vulkan实现的异构系统，fname:vkGetInstanceProcAddr 返回的函数指针可能指向 不可可分发的代码，亦即
对不同的sname:VkDevice对象调用不同的真实实现。
这个内部分发的开销可以通过获取设备各异的函数指针而避免，这些命令使用设备或者设备子对象作为不可分发对象。
这些函数指针可通过以下命令获取：

include::../api/protos/vkGetDeviceProcAddr.txt[]

下面的表格定义了使用fname:vkGetDeviceProcAddr的各种场景和各自期待的返回值。

返回的函数指针是 tlink:PFN_vkVoidFunction 类型的，必须强制转换为查询所用的类型：

.vkGetDeviceProcAddr behavior
[width="80%",options="header"]
|====
| pname:device   | pname:pName                           | return value
| `NULL`         | *                                     | undefined
| invalid device | *                                     | undefined
| device         | `NULL`                                | undefined
| device         | core Vulkan command                   | fp^1^
| device         | enabled extension commands            | fp^1^
| device         | * (any pname:pName not covered above) | `NULL`
|====

1::
    The returned function pointer must: only be called with a dispatchable
    object (the first parameter) that is pname:device or a child of
    pname:device.
    e.g. sname:VkDevice, sname:VkQueue, or sname:VkCommandBuffer.

include::../validity/protos/vkGetDeviceProcAddr.txt[]

// refEnd vkGetDeviceProcAddr PFN_vkVoidFunction

// refBegin PFN_vkVoidFunction Dummy function pointer type returned by queries

The definition of tlink:PFN_vkVoidFunction is:

include::../api/funcpointers/PFN_vkVoidFunction.txt[]

// refEnd PFN_vkVoidFunction vkGetDeviceProcAddr vkGetInstanceProcAddr

ifdef::VK_KHR_get_physical_device_properties2[]

=== Extending Physical Device From Device Extensions

When the +VK_KHR_get_physical_device_properties2+ extension is enabled,
physical device extension commands and structures can: be used with a
physical device if the corresponding extension is enumerated by
flink:vkEnumerateDeviceExtensionProperties for that physical device, even
before a logical device has been created.

To obtain a function pointer for a physical-device command from a device
extension, an application can: use fname:vkGetInstanceProcAddr.
This function pointer may: point to dispatch code, which calls a different
real implementation for different sname:VkPhysicalDevice objects.
Behavior is undefined if an extension physical-device command is called on a
physical device that does not support the extension.

Device extensions may: define structures that can: be added to the
pNext-chain of physical-device commands.
Behavior is undefined if such an extension structure is passed to a physical
device command for a physical device that does not support the extension.

endif::VK_KHR_get_physical_device_properties2[]


[[initialization-instances]]
== 实例

// refBegin VkInstance Opaque handle to a instance object

在Vulkan中没有全局的状态，所有应用程序自己的状态都存储在一个sname:VkInstance对象中。
创建一个sname:VkInstance 对象会初始化Vulkan库并允许应用程序传递信息给Vulkan实现。

Instances are represented by sname:VkInstance handles:

include::../api/handles/VkInstance.txt[]

// refEnd VkInstance

// refBegin vkCreateInstance Create a new Vulkan instance

To create an instance object, call:

include::../api/protos/vkCreateInstance.txt[]

  * pname:pCreateInfo points to an instance of slink:VkInstanceCreateInfo
    controlling creation of the instance.
  * pname:pAllocator controls host memory allocation as described in the
    <<memory-allocation, Memory Allocation>> chapter.
  * pname:pInstance points a sname:VkInstance handle in which the resulting
    instance is returned.

fname:vkCreateInstance创建一个实例，然后启用并初始化应用程序需要的全局层和拓展。
如果一个拓展通过一个层提供，那么层和拓展都必须在fname:vkCreateInstance指定。
如果指定的层没有被找到，那么将不会创建sname:VkInstance对象，函数将返回ename:VK_ERROR_LAYER_NOT_PRESENT。
同样，如果一个指定的拓展没有被找到，函数调用将返回ename:VK_ERROR_EXTENSION_NOT_PRESENT。

include::../validity/protos/vkCreateInstance.txt[]

// refBegin VkInstanceCreateInfo Structure specifying parameters of a newly created instance

The sname:VkInstanceCreateInfo structure is defined as:

include::../api/structs/VkInstanceCreateInfo.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to an extension-specific structure.
  * pname:flags is reserved for future use.
  * pname:pApplicationInfo is `NULL` or a pointer to an instance of
    sname:VkApplicationInfo.
    If not `NULL`, this information helps implementations recognize behavior
    inherent to classes of applications.
    slink:VkApplicationInfo is defined in detail below.
  * pname:enabledLayerCount is the number of global layers to enable.
  * pname:ppEnabledLayerNames is a pointer to an array of
    pname:enabledLayerCount null-terminated UTF-8 strings containing the
    names of layers to enable for the created instance.
    See the <<extended-functionality-layers,Layers>> section for further
    details.
  * pname:enabledExtensionCount is the number of global extensions to
    enable.
  * pname:ppEnabledExtensionNames is a pointer to an array of
    pname:enabledExtensionCount null-terminated UTF-8 strings containing the
    names of extensions to enable.

include::../validity/structs/VkInstanceCreateInfo.txt[]

ifdef::VK_EXT_validation_flags[]
include::VK_EXT_validation_flags.txt[]
endif::VK_EXT_validation_flags[]


// refBegin VkApplicationInfo Structure specifying application info

The sname:VkApplicationInfo structure is defined as:

include::../api/structs/VkApplicationInfo.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to an extension-specific structure.
  * pname:pApplicationName is a pointer to a null-terminated UTF-8 string
    containing the name of the application.
  * pname:applicationVersion is an unsigned integer variable containing the
    developer-supplied version number of the application.
  * pname:pEngineName is a pointer to a null-terminated UTF-8 string
    containing the name of the engine (if any) used to create the
    application.
  * pname:engineVersion is an unsigned integer variable containing the
    developer-supplied version number of the engine used to create the
    application.
  * pname:apiVersion is the version of the Vulkan API against which the
    application expects to run, encoded as described in the
    <<fundamentals-versionnum,API Version Numbers and Semantics>> section.
    If pname:apiVersion is 0 the implementation must: ignore it, otherwise
    if the implementation does not support the requested pname:apiVersion it
    must: return ename:VK_ERROR_INCOMPATIBLE_DRIVER.
    The patch version number specified in pname:apiVersion is ignored when
    creating an instance object.
    Only the major and minor versions of the instance must: match those
    requested in pname:apiVersion.

.Valid Usage
****
  * pname:apiVersion must: be zero, or otherwise it must: be a version that
    the implementation supports, or supports an effective substitute for
****

include::../validity/structs/VkApplicationInfo.txt[]

// refBegin vkDestroyInstance Destroy an instance of Vulkan

To destroy an instance, call:

include::../api/protos/vkDestroyInstance.txt[]

  * pname:instance is the handle of the instance to destroy.
  * pname:pAllocator controls host memory allocation as described in the
    <<memory-allocation, Memory Allocation>> chapter.

.Valid Usage
****
  * All child objects created using pname:instance must: have been destroyed
    prior to destroying pname:instance
  * If sname:VkAllocationCallbacks were provided when pname:instance was
    created, a compatible set of callbacks must: be provided here
  * If no sname:VkAllocationCallbacks were provided when pname:instance was
    created, pname:pAllocator must: be `NULL`
****

include::../validity/protos/vkDestroyInstance.txt[]
