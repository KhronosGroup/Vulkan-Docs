flags = {}
enums = {}
structs = {}
consts = {}
enums = {}
consts = {}
protos = {}
funcpointers = {}
# Unprocessed type: vk_platform category: include
structs['VK_MAKE_VERSION'] =  None
structs['VK_API_VERSION'] =  None
structs['VK_API_VERSION_1_0'] =  None
structs['VK_VERSION_MAJOR'] =  None
structs['VK_VERSION_MINOR'] =  None
structs['VK_VERSION_PATCH'] =  None
structs['VK_HEADER_VERSION'] =  None
structs['VK_NULL_HANDLE'] =  None
consts['VK_PIPELINE_CACHE_HEADER_VERSION_ONE'] =  'VkPipelineCacheHeaderVersion'
enums['VkPipelineCacheHeaderVersion'] =  ['VK_PIPELINE_CACHE_HEADER_VERSION_ONE']
consts['VK_LOD_CLAMP_NONE'] =  None
consts['VK_REMAINING_MIP_LEVELS'] =  None
consts['VK_REMAINING_ARRAY_LAYERS'] =  None
consts['VK_WHOLE_SIZE'] =  None
consts['VK_ATTACHMENT_UNUSED'] =  None
consts['VK_TRUE'] =  None
consts['VK_FALSE'] =  None
consts['VK_QUEUE_FAMILY_IGNORED'] =  None
consts['VK_SUBPASS_EXTERNAL'] =  None
consts['VK_SUCCESS'] =  'VkResult'
consts['VK_NOT_READY'] =  'VkResult'
consts['VK_TIMEOUT'] =  'VkResult'
consts['VK_EVENT_SET'] =  'VkResult'
consts['VK_EVENT_RESET'] =  'VkResult'
consts['VK_INCOMPLETE'] =  'VkResult'
consts['VK_ERROR_OUT_OF_HOST_MEMORY'] =  'VkResult'
consts['VK_ERROR_OUT_OF_DEVICE_MEMORY'] =  'VkResult'
consts['VK_ERROR_INITIALIZATION_FAILED'] =  'VkResult'
consts['VK_ERROR_DEVICE_LOST'] =  'VkResult'
consts['VK_ERROR_MEMORY_MAP_FAILED'] =  'VkResult'
consts['VK_ERROR_LAYER_NOT_PRESENT'] =  'VkResult'
consts['VK_ERROR_EXTENSION_NOT_PRESENT'] =  'VkResult'
consts['VK_ERROR_FEATURE_NOT_PRESENT'] =  'VkResult'
consts['VK_ERROR_INCOMPATIBLE_DRIVER'] =  'VkResult'
consts['VK_ERROR_TOO_MANY_OBJECTS'] =  'VkResult'
consts['VK_ERROR_FORMAT_NOT_SUPPORTED'] =  'VkResult'
consts['VK_ERROR_SURFACE_LOST_KHR'] =  'VkResult'
consts['VK_ERROR_NATIVE_WINDOW_IN_USE_KHR'] =  'VkResult'
consts['VK_SUBOPTIMAL_KHR'] =  'VkResult'
consts['VK_ERROR_OUT_OF_DATE_KHR'] =  'VkResult'
consts['VK_ERROR_INCOMPATIBLE_DISPLAY_KHR'] =  'VkResult'
consts['VK_ERROR_VALIDATION_FAILED_EXT'] =  'VkResult'
consts['VK_ERROR_INVALID_SHADER_NV'] =  'VkResult'
consts['VK_NV_EXTENSION_1_ERROR'] =  'VkResult'
enums['VkResult'] =  ['VK_SUCCESS', 'VK_NOT_READY', 'VK_TIMEOUT', 'VK_EVENT_SET', 'VK_EVENT_RESET', 'VK_INCOMPLETE', 'VK_ERROR_OUT_OF_HOST_MEMORY', 'VK_ERROR_OUT_OF_DEVICE_MEMORY', 'VK_ERROR_INITIALIZATION_FAILED', 'VK_ERROR_DEVICE_LOST', 'VK_ERROR_MEMORY_MAP_FAILED', 'VK_ERROR_LAYER_NOT_PRESENT', 'VK_ERROR_EXTENSION_NOT_PRESENT', 'VK_ERROR_FEATURE_NOT_PRESENT', 'VK_ERROR_INCOMPATIBLE_DRIVER', 'VK_ERROR_TOO_MANY_OBJECTS', 'VK_ERROR_FORMAT_NOT_SUPPORTED', 'VK_ERROR_SURFACE_LOST_KHR', 'VK_ERROR_NATIVE_WINDOW_IN_USE_KHR', 'VK_SUBOPTIMAL_KHR', 'VK_ERROR_OUT_OF_DATE_KHR', 'VK_ERROR_INCOMPATIBLE_DISPLAY_KHR', 'VK_ERROR_VALIDATION_FAILED_EXT', 'VK_ERROR_INVALID_SHADER_NV', 'VK_NV_EXTENSION_1_ERROR']
consts['VK_STRUCTURE_TYPE_APPLICATION_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_SUBMIT_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_BIND_SPARSE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_FENCE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_EVENT_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_MEMORY_BARRIER'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_PRESENT_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT'] =  'VkStructureType'
consts['VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT'] =  'VkStructureType'
enums['VkStructureType'] =  ['VK_STRUCTURE_TYPE_APPLICATION_INFO', 'VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO', 'VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO', 'VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO', 'VK_STRUCTURE_TYPE_SUBMIT_INFO', 'VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO', 'VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE', 'VK_STRUCTURE_TYPE_BIND_SPARSE_INFO', 'VK_STRUCTURE_TYPE_FENCE_CREATE_INFO', 'VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO', 'VK_STRUCTURE_TYPE_EVENT_CREATE_INFO', 'VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO', 'VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO', 'VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO', 'VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO', 'VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO', 'VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO', 'VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO', 'VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO', 'VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO', 'VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO', 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO', 'VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO', 'VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO', 'VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET', 'VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET', 'VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO', 'VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO', 'VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO', 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO', 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO', 'VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO', 'VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO', 'VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER', 'VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER', 'VK_STRUCTURE_TYPE_MEMORY_BARRIER', 'VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO', 'VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO', 'VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_PRESENT_INFO_KHR', 'VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR', 'VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR', 'VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT', 'VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT', 'VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT', 'VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT']
# Unprocessed type: void
# Unprocessed type: uint32_t
# Unprocessed type: VkFlags category: basetype
flags['VkInstanceCreateFlags'] =  None
# Unprocessed type: char
structs['VkApplicationInfo'] =  ['sType', 'pNext', 'pApplicationName', 'applicationVersion', 'pEngineName', 'engineVersion', 'apiVersion']
structs['VkInstanceCreateInfo'] =  ['sType', 'pNext', 'flags', 'pApplicationInfo', 'enabledLayerCount', 'ppEnabledLayerNames', 'enabledExtensionCount', 'ppEnabledExtensionNames']
# Unprocessed type: size_t
consts['VK_SYSTEM_ALLOCATION_SCOPE_COMMAND'] =  'VkSystemAllocationScope'
consts['VK_SYSTEM_ALLOCATION_SCOPE_OBJECT'] =  'VkSystemAllocationScope'
consts['VK_SYSTEM_ALLOCATION_SCOPE_CACHE'] =  'VkSystemAllocationScope'
consts['VK_SYSTEM_ALLOCATION_SCOPE_DEVICE'] =  'VkSystemAllocationScope'
consts['VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE'] =  'VkSystemAllocationScope'
enums['VkSystemAllocationScope'] =  ['VK_SYSTEM_ALLOCATION_SCOPE_COMMAND', 'VK_SYSTEM_ALLOCATION_SCOPE_OBJECT', 'VK_SYSTEM_ALLOCATION_SCOPE_CACHE', 'VK_SYSTEM_ALLOCATION_SCOPE_DEVICE', 'VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE']
funcpointers['PFN_vkAllocationFunction'] =  None
funcpointers['PFN_vkReallocationFunction'] =  None
funcpointers['PFN_vkFreeFunction'] =  None
consts['VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE'] =  'VkInternalAllocationType'
enums['VkInternalAllocationType'] =  ['VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE']
funcpointers['PFN_vkInternalAllocationNotification'] =  None
funcpointers['PFN_vkInternalFreeNotification'] =  None
structs['VkAllocationCallbacks'] =  ['pUserData', 'pfnAllocation', 'pfnReallocation', 'pfnFree', 'pfnInternalAllocation', 'pfnInternalFree']
structs['VK_DEFINE_HANDLE'] =  None
structs['VkInstance'] =  None
protos['vkCreateInstance'] =  ['pCreateInfo', 'pAllocator', 'pInstance']
protos['vkDestroyInstance'] =  ['instance', 'pAllocator']
structs['VkPhysicalDevice'] =  None
protos['vkEnumeratePhysicalDevices'] =  ['instance', 'pPhysicalDeviceCount', 'pPhysicalDevices']
# Unprocessed type: VkBool32 category: basetype
structs['VkPhysicalDeviceFeatures'] =  ['robustBufferAccess', 'fullDrawIndexUint32', 'imageCubeArray', 'independentBlend', 'geometryShader', 'tessellationShader', 'sampleRateShading', 'dualSrcBlend', 'logicOp', 'multiDrawIndirect', 'drawIndirectFirstInstance', 'depthClamp', 'depthBiasClamp', 'fillModeNonSolid', 'depthBounds', 'wideLines', 'largePoints', 'alphaToOne', 'multiViewport', 'samplerAnisotropy', 'textureCompressionETC2', 'textureCompressionASTC_LDR', 'textureCompressionBC', 'occlusionQueryPrecise', 'pipelineStatisticsQuery', 'vertexPipelineStoresAndAtomics', 'fragmentStoresAndAtomics', 'shaderTessellationAndGeometryPointSize', 'shaderImageGatherExtended', 'shaderStorageImageExtendedFormats', 'shaderStorageImageMultisample', 'shaderStorageImageReadWithoutFormat', 'shaderStorageImageWriteWithoutFormat', 'shaderUniformBufferArrayDynamicIndexing', 'shaderSampledImageArrayDynamicIndexing', 'shaderStorageBufferArrayDynamicIndexing', 'shaderStorageImageArrayDynamicIndexing', 'shaderClipDistance', 'shaderCullDistance', 'shaderFloat64', 'shaderInt64', 'shaderInt16', 'shaderResourceResidency', 'shaderResourceMinLod', 'sparseBinding', 'sparseResidencyBuffer', 'sparseResidencyImage2D', 'sparseResidencyImage3D', 'sparseResidency2Samples', 'sparseResidency4Samples', 'sparseResidency8Samples', 'sparseResidency16Samples', 'sparseResidencyAliased', 'variableMultisampleRate', 'inheritedQueries']
protos['vkGetPhysicalDeviceFeatures'] =  ['physicalDevice', 'pFeatures']
consts['VK_FORMAT_UNDEFINED'] =  'VkFormat'
consts['VK_FORMAT_R4G4_UNORM_PACK8'] =  'VkFormat'
consts['VK_FORMAT_R4G4B4A4_UNORM_PACK16'] =  'VkFormat'
consts['VK_FORMAT_B4G4R4A4_UNORM_PACK16'] =  'VkFormat'
consts['VK_FORMAT_R5G6B5_UNORM_PACK16'] =  'VkFormat'
consts['VK_FORMAT_B5G6R5_UNORM_PACK16'] =  'VkFormat'
consts['VK_FORMAT_R5G5B5A1_UNORM_PACK16'] =  'VkFormat'
consts['VK_FORMAT_B5G5R5A1_UNORM_PACK16'] =  'VkFormat'
consts['VK_FORMAT_A1R5G5B5_UNORM_PACK16'] =  'VkFormat'
consts['VK_FORMAT_R8_UNORM'] =  'VkFormat'
consts['VK_FORMAT_R8_SNORM'] =  'VkFormat'
consts['VK_FORMAT_R8_USCALED'] =  'VkFormat'
consts['VK_FORMAT_R8_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_R8_UINT'] =  'VkFormat'
consts['VK_FORMAT_R8_SINT'] =  'VkFormat'
consts['VK_FORMAT_R8_SRGB'] =  'VkFormat'
consts['VK_FORMAT_R8G8_UNORM'] =  'VkFormat'
consts['VK_FORMAT_R8G8_SNORM'] =  'VkFormat'
consts['VK_FORMAT_R8G8_USCALED'] =  'VkFormat'
consts['VK_FORMAT_R8G8_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_R8G8_UINT'] =  'VkFormat'
consts['VK_FORMAT_R8G8_SINT'] =  'VkFormat'
consts['VK_FORMAT_R8G8_SRGB'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8_UNORM'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8_SNORM'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8_USCALED'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8_UINT'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8_SINT'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8_SRGB'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8_UNORM'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8_SNORM'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8_USCALED'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8_UINT'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8_SINT'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8_SRGB'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8A8_UNORM'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8A8_SNORM'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8A8_USCALED'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8A8_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8A8_UINT'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8A8_SINT'] =  'VkFormat'
consts['VK_FORMAT_R8G8B8A8_SRGB'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8A8_UNORM'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8A8_SNORM'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8A8_USCALED'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8A8_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8A8_UINT'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8A8_SINT'] =  'VkFormat'
consts['VK_FORMAT_B8G8R8A8_SRGB'] =  'VkFormat'
consts['VK_FORMAT_A8B8G8R8_UNORM_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A8B8G8R8_SNORM_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A8B8G8R8_USCALED_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A8B8G8R8_SSCALED_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A8B8G8R8_UINT_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A8B8G8R8_SINT_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A8B8G8R8_SRGB_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2R10G10B10_UNORM_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2R10G10B10_SNORM_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2R10G10B10_USCALED_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2R10G10B10_SSCALED_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2R10G10B10_UINT_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2R10G10B10_SINT_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2B10G10R10_UNORM_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2B10G10R10_SNORM_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2B10G10R10_USCALED_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2B10G10R10_SSCALED_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2B10G10R10_UINT_PACK32'] =  'VkFormat'
consts['VK_FORMAT_A2B10G10R10_SINT_PACK32'] =  'VkFormat'
consts['VK_FORMAT_R16_UNORM'] =  'VkFormat'
consts['VK_FORMAT_R16_SNORM'] =  'VkFormat'
consts['VK_FORMAT_R16_USCALED'] =  'VkFormat'
consts['VK_FORMAT_R16_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_R16_UINT'] =  'VkFormat'
consts['VK_FORMAT_R16_SINT'] =  'VkFormat'
consts['VK_FORMAT_R16_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R16G16_UNORM'] =  'VkFormat'
consts['VK_FORMAT_R16G16_SNORM'] =  'VkFormat'
consts['VK_FORMAT_R16G16_USCALED'] =  'VkFormat'
consts['VK_FORMAT_R16G16_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_R16G16_UINT'] =  'VkFormat'
consts['VK_FORMAT_R16G16_SINT'] =  'VkFormat'
consts['VK_FORMAT_R16G16_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16_UNORM'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16_SNORM'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16_USCALED'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16_UINT'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16_SINT'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16A16_UNORM'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16A16_SNORM'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16A16_USCALED'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16A16_SSCALED'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16A16_UINT'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16A16_SINT'] =  'VkFormat'
consts['VK_FORMAT_R16G16B16A16_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R32_UINT'] =  'VkFormat'
consts['VK_FORMAT_R32_SINT'] =  'VkFormat'
consts['VK_FORMAT_R32_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R32G32_UINT'] =  'VkFormat'
consts['VK_FORMAT_R32G32_SINT'] =  'VkFormat'
consts['VK_FORMAT_R32G32_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R32G32B32_UINT'] =  'VkFormat'
consts['VK_FORMAT_R32G32B32_SINT'] =  'VkFormat'
consts['VK_FORMAT_R32G32B32_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R32G32B32A32_UINT'] =  'VkFormat'
consts['VK_FORMAT_R32G32B32A32_SINT'] =  'VkFormat'
consts['VK_FORMAT_R32G32B32A32_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R64_UINT'] =  'VkFormat'
consts['VK_FORMAT_R64_SINT'] =  'VkFormat'
consts['VK_FORMAT_R64_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R64G64_UINT'] =  'VkFormat'
consts['VK_FORMAT_R64G64_SINT'] =  'VkFormat'
consts['VK_FORMAT_R64G64_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R64G64B64_UINT'] =  'VkFormat'
consts['VK_FORMAT_R64G64B64_SINT'] =  'VkFormat'
consts['VK_FORMAT_R64G64B64_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_R64G64B64A64_UINT'] =  'VkFormat'
consts['VK_FORMAT_R64G64B64A64_SINT'] =  'VkFormat'
consts['VK_FORMAT_R64G64B64A64_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_B10G11R11_UFLOAT_PACK32'] =  'VkFormat'
consts['VK_FORMAT_E5B9G9R9_UFLOAT_PACK32'] =  'VkFormat'
consts['VK_FORMAT_D16_UNORM'] =  'VkFormat'
consts['VK_FORMAT_X8_D24_UNORM_PACK32'] =  'VkFormat'
consts['VK_FORMAT_D32_SFLOAT'] =  'VkFormat'
consts['VK_FORMAT_S8_UINT'] =  'VkFormat'
consts['VK_FORMAT_D16_UNORM_S8_UINT'] =  'VkFormat'
consts['VK_FORMAT_D24_UNORM_S8_UINT'] =  'VkFormat'
consts['VK_FORMAT_D32_SFLOAT_S8_UINT'] =  'VkFormat'
consts['VK_FORMAT_BC1_RGB_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC1_RGB_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC1_RGBA_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC1_RGBA_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC2_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC2_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC3_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC3_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC4_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC4_SNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC5_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC5_SNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC6H_UFLOAT_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC6H_SFLOAT_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC7_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_BC7_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_EAC_R11_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_EAC_R11_SNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_EAC_R11G11_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_EAC_R11G11_SNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_4x4_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_4x4_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_5x4_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_5x4_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_5x5_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_5x5_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_6x5_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_6x5_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_6x6_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_6x6_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_8x5_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_8x5_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_8x6_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_8x6_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_8x8_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_8x8_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_10x5_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_10x5_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_10x6_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_10x6_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_10x8_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_10x8_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_10x10_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_10x10_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_12x10_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_12x10_SRGB_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_12x12_UNORM_BLOCK'] =  'VkFormat'
consts['VK_FORMAT_ASTC_12x12_SRGB_BLOCK'] =  'VkFormat'
enums['VkFormat'] =  ['VK_FORMAT_UNDEFINED', 'VK_FORMAT_R4G4_UNORM_PACK8', 'VK_FORMAT_R4G4B4A4_UNORM_PACK16', 'VK_FORMAT_B4G4R4A4_UNORM_PACK16', 'VK_FORMAT_R5G6B5_UNORM_PACK16', 'VK_FORMAT_B5G6R5_UNORM_PACK16', 'VK_FORMAT_R5G5B5A1_UNORM_PACK16', 'VK_FORMAT_B5G5R5A1_UNORM_PACK16', 'VK_FORMAT_A1R5G5B5_UNORM_PACK16', 'VK_FORMAT_R8_UNORM', 'VK_FORMAT_R8_SNORM', 'VK_FORMAT_R8_USCALED', 'VK_FORMAT_R8_SSCALED', 'VK_FORMAT_R8_UINT', 'VK_FORMAT_R8_SINT', 'VK_FORMAT_R8_SRGB', 'VK_FORMAT_R8G8_UNORM', 'VK_FORMAT_R8G8_SNORM', 'VK_FORMAT_R8G8_USCALED', 'VK_FORMAT_R8G8_SSCALED', 'VK_FORMAT_R8G8_UINT', 'VK_FORMAT_R8G8_SINT', 'VK_FORMAT_R8G8_SRGB', 'VK_FORMAT_R8G8B8_UNORM', 'VK_FORMAT_R8G8B8_SNORM', 'VK_FORMAT_R8G8B8_USCALED', 'VK_FORMAT_R8G8B8_SSCALED', 'VK_FORMAT_R8G8B8_UINT', 'VK_FORMAT_R8G8B8_SINT', 'VK_FORMAT_R8G8B8_SRGB', 'VK_FORMAT_B8G8R8_UNORM', 'VK_FORMAT_B8G8R8_SNORM', 'VK_FORMAT_B8G8R8_USCALED', 'VK_FORMAT_B8G8R8_SSCALED', 'VK_FORMAT_B8G8R8_UINT', 'VK_FORMAT_B8G8R8_SINT', 'VK_FORMAT_B8G8R8_SRGB', 'VK_FORMAT_R8G8B8A8_UNORM', 'VK_FORMAT_R8G8B8A8_SNORM', 'VK_FORMAT_R8G8B8A8_USCALED', 'VK_FORMAT_R8G8B8A8_SSCALED', 'VK_FORMAT_R8G8B8A8_UINT', 'VK_FORMAT_R8G8B8A8_SINT', 'VK_FORMAT_R8G8B8A8_SRGB', 'VK_FORMAT_B8G8R8A8_UNORM', 'VK_FORMAT_B8G8R8A8_SNORM', 'VK_FORMAT_B8G8R8A8_USCALED', 'VK_FORMAT_B8G8R8A8_SSCALED', 'VK_FORMAT_B8G8R8A8_UINT', 'VK_FORMAT_B8G8R8A8_SINT', 'VK_FORMAT_B8G8R8A8_SRGB', 'VK_FORMAT_A8B8G8R8_UNORM_PACK32', 'VK_FORMAT_A8B8G8R8_SNORM_PACK32', 'VK_FORMAT_A8B8G8R8_USCALED_PACK32', 'VK_FORMAT_A8B8G8R8_SSCALED_PACK32', 'VK_FORMAT_A8B8G8R8_UINT_PACK32', 'VK_FORMAT_A8B8G8R8_SINT_PACK32', 'VK_FORMAT_A8B8G8R8_SRGB_PACK32', 'VK_FORMAT_A2R10G10B10_UNORM_PACK32', 'VK_FORMAT_A2R10G10B10_SNORM_PACK32', 'VK_FORMAT_A2R10G10B10_USCALED_PACK32', 'VK_FORMAT_A2R10G10B10_SSCALED_PACK32', 'VK_FORMAT_A2R10G10B10_UINT_PACK32', 'VK_FORMAT_A2R10G10B10_SINT_PACK32', 'VK_FORMAT_A2B10G10R10_UNORM_PACK32', 'VK_FORMAT_A2B10G10R10_SNORM_PACK32', 'VK_FORMAT_A2B10G10R10_USCALED_PACK32', 'VK_FORMAT_A2B10G10R10_SSCALED_PACK32', 'VK_FORMAT_A2B10G10R10_UINT_PACK32', 'VK_FORMAT_A2B10G10R10_SINT_PACK32', 'VK_FORMAT_R16_UNORM', 'VK_FORMAT_R16_SNORM', 'VK_FORMAT_R16_USCALED', 'VK_FORMAT_R16_SSCALED', 'VK_FORMAT_R16_UINT', 'VK_FORMAT_R16_SINT', 'VK_FORMAT_R16_SFLOAT', 'VK_FORMAT_R16G16_UNORM', 'VK_FORMAT_R16G16_SNORM', 'VK_FORMAT_R16G16_USCALED', 'VK_FORMAT_R16G16_SSCALED', 'VK_FORMAT_R16G16_UINT', 'VK_FORMAT_R16G16_SINT', 'VK_FORMAT_R16G16_SFLOAT', 'VK_FORMAT_R16G16B16_UNORM', 'VK_FORMAT_R16G16B16_SNORM', 'VK_FORMAT_R16G16B16_USCALED', 'VK_FORMAT_R16G16B16_SSCALED', 'VK_FORMAT_R16G16B16_UINT', 'VK_FORMAT_R16G16B16_SINT', 'VK_FORMAT_R16G16B16_SFLOAT', 'VK_FORMAT_R16G16B16A16_UNORM', 'VK_FORMAT_R16G16B16A16_SNORM', 'VK_FORMAT_R16G16B16A16_USCALED', 'VK_FORMAT_R16G16B16A16_SSCALED', 'VK_FORMAT_R16G16B16A16_UINT', 'VK_FORMAT_R16G16B16A16_SINT', 'VK_FORMAT_R16G16B16A16_SFLOAT', 'VK_FORMAT_R32_UINT', 'VK_FORMAT_R32_SINT', 'VK_FORMAT_R32_SFLOAT', 'VK_FORMAT_R32G32_UINT', 'VK_FORMAT_R32G32_SINT', 'VK_FORMAT_R32G32_SFLOAT', 'VK_FORMAT_R32G32B32_UINT', 'VK_FORMAT_R32G32B32_SINT', 'VK_FORMAT_R32G32B32_SFLOAT', 'VK_FORMAT_R32G32B32A32_UINT', 'VK_FORMAT_R32G32B32A32_SINT', 'VK_FORMAT_R32G32B32A32_SFLOAT', 'VK_FORMAT_R64_UINT', 'VK_FORMAT_R64_SINT', 'VK_FORMAT_R64_SFLOAT', 'VK_FORMAT_R64G64_UINT', 'VK_FORMAT_R64G64_SINT', 'VK_FORMAT_R64G64_SFLOAT', 'VK_FORMAT_R64G64B64_UINT', 'VK_FORMAT_R64G64B64_SINT', 'VK_FORMAT_R64G64B64_SFLOAT', 'VK_FORMAT_R64G64B64A64_UINT', 'VK_FORMAT_R64G64B64A64_SINT', 'VK_FORMAT_R64G64B64A64_SFLOAT', 'VK_FORMAT_B10G11R11_UFLOAT_PACK32', 'VK_FORMAT_E5B9G9R9_UFLOAT_PACK32', 'VK_FORMAT_D16_UNORM', 'VK_FORMAT_X8_D24_UNORM_PACK32', 'VK_FORMAT_D32_SFLOAT', 'VK_FORMAT_S8_UINT', 'VK_FORMAT_D16_UNORM_S8_UINT', 'VK_FORMAT_D24_UNORM_S8_UINT', 'VK_FORMAT_D32_SFLOAT_S8_UINT', 'VK_FORMAT_BC1_RGB_UNORM_BLOCK', 'VK_FORMAT_BC1_RGB_SRGB_BLOCK', 'VK_FORMAT_BC1_RGBA_UNORM_BLOCK', 'VK_FORMAT_BC1_RGBA_SRGB_BLOCK', 'VK_FORMAT_BC2_UNORM_BLOCK', 'VK_FORMAT_BC2_SRGB_BLOCK', 'VK_FORMAT_BC3_UNORM_BLOCK', 'VK_FORMAT_BC3_SRGB_BLOCK', 'VK_FORMAT_BC4_UNORM_BLOCK', 'VK_FORMAT_BC4_SNORM_BLOCK', 'VK_FORMAT_BC5_UNORM_BLOCK', 'VK_FORMAT_BC5_SNORM_BLOCK', 'VK_FORMAT_BC6H_UFLOAT_BLOCK', 'VK_FORMAT_BC6H_SFLOAT_BLOCK', 'VK_FORMAT_BC7_UNORM_BLOCK', 'VK_FORMAT_BC7_SRGB_BLOCK', 'VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK', 'VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK', 'VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK', 'VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK', 'VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK', 'VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK', 'VK_FORMAT_EAC_R11_UNORM_BLOCK', 'VK_FORMAT_EAC_R11_SNORM_BLOCK', 'VK_FORMAT_EAC_R11G11_UNORM_BLOCK', 'VK_FORMAT_EAC_R11G11_SNORM_BLOCK', 'VK_FORMAT_ASTC_4x4_UNORM_BLOCK', 'VK_FORMAT_ASTC_4x4_SRGB_BLOCK', 'VK_FORMAT_ASTC_5x4_UNORM_BLOCK', 'VK_FORMAT_ASTC_5x4_SRGB_BLOCK', 'VK_FORMAT_ASTC_5x5_UNORM_BLOCK', 'VK_FORMAT_ASTC_5x5_SRGB_BLOCK', 'VK_FORMAT_ASTC_6x5_UNORM_BLOCK', 'VK_FORMAT_ASTC_6x5_SRGB_BLOCK', 'VK_FORMAT_ASTC_6x6_UNORM_BLOCK', 'VK_FORMAT_ASTC_6x6_SRGB_BLOCK', 'VK_FORMAT_ASTC_8x5_UNORM_BLOCK', 'VK_FORMAT_ASTC_8x5_SRGB_BLOCK', 'VK_FORMAT_ASTC_8x6_UNORM_BLOCK', 'VK_FORMAT_ASTC_8x6_SRGB_BLOCK', 'VK_FORMAT_ASTC_8x8_UNORM_BLOCK', 'VK_FORMAT_ASTC_8x8_SRGB_BLOCK', 'VK_FORMAT_ASTC_10x5_UNORM_BLOCK', 'VK_FORMAT_ASTC_10x5_SRGB_BLOCK', 'VK_FORMAT_ASTC_10x6_UNORM_BLOCK', 'VK_FORMAT_ASTC_10x6_SRGB_BLOCK', 'VK_FORMAT_ASTC_10x8_UNORM_BLOCK', 'VK_FORMAT_ASTC_10x8_SRGB_BLOCK', 'VK_FORMAT_ASTC_10x10_UNORM_BLOCK', 'VK_FORMAT_ASTC_10x10_SRGB_BLOCK', 'VK_FORMAT_ASTC_12x10_UNORM_BLOCK', 'VK_FORMAT_ASTC_12x10_SRGB_BLOCK', 'VK_FORMAT_ASTC_12x12_UNORM_BLOCK', 'VK_FORMAT_ASTC_12x12_SRGB_BLOCK']
consts['VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_BLIT_SRC_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_BLIT_DST_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT'] =  'VkFormatFeatureFlagBits'
consts['VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG'] =  'VkFormatFeatureFlagBits'
enums['VkFormatFeatureFlagBits'] =  ['VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT', 'VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT', 'VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT', 'VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT', 'VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT', 'VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT', 'VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT', 'VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT', 'VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT', 'VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT', 'VK_FORMAT_FEATURE_BLIT_SRC_BIT', 'VK_FORMAT_FEATURE_BLIT_DST_BIT', 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT', 'VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG']
flags['VkFormatFeatureFlags'] =  'VkFormatFeatureFlagBits'
structs['VkFormatProperties'] =  ['linearTilingFeatures', 'optimalTilingFeatures', 'bufferFeatures']
protos['vkGetPhysicalDeviceFormatProperties'] =  ['physicalDevice', 'format', 'pFormatProperties']
consts['VK_IMAGE_TYPE_1D'] =  'VkImageType'
consts['VK_IMAGE_TYPE_2D'] =  'VkImageType'
consts['VK_IMAGE_TYPE_3D'] =  'VkImageType'
enums['VkImageType'] =  ['VK_IMAGE_TYPE_1D', 'VK_IMAGE_TYPE_2D', 'VK_IMAGE_TYPE_3D']
consts['VK_IMAGE_TILING_OPTIMAL'] =  'VkImageTiling'
consts['VK_IMAGE_TILING_LINEAR'] =  'VkImageTiling'
enums['VkImageTiling'] =  ['VK_IMAGE_TILING_OPTIMAL', 'VK_IMAGE_TILING_LINEAR']
consts['VK_IMAGE_USAGE_TRANSFER_SRC_BIT'] =  'VkImageUsageFlagBits'
consts['VK_IMAGE_USAGE_TRANSFER_DST_BIT'] =  'VkImageUsageFlagBits'
consts['VK_IMAGE_USAGE_SAMPLED_BIT'] =  'VkImageUsageFlagBits'
consts['VK_IMAGE_USAGE_STORAGE_BIT'] =  'VkImageUsageFlagBits'
consts['VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT'] =  'VkImageUsageFlagBits'
consts['VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT'] =  'VkImageUsageFlagBits'
consts['VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT'] =  'VkImageUsageFlagBits'
consts['VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT'] =  'VkImageUsageFlagBits'
enums['VkImageUsageFlagBits'] =  ['VK_IMAGE_USAGE_TRANSFER_SRC_BIT', 'VK_IMAGE_USAGE_TRANSFER_DST_BIT', 'VK_IMAGE_USAGE_SAMPLED_BIT', 'VK_IMAGE_USAGE_STORAGE_BIT', 'VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT', 'VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT', 'VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT', 'VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT']
flags['VkImageUsageFlags'] =  'VkImageUsageFlagBits'
consts['VK_IMAGE_CREATE_SPARSE_BINDING_BIT'] =  'VkImageCreateFlagBits'
consts['VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT'] =  'VkImageCreateFlagBits'
consts['VK_IMAGE_CREATE_SPARSE_ALIASED_BIT'] =  'VkImageCreateFlagBits'
consts['VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT'] =  'VkImageCreateFlagBits'
consts['VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT'] =  'VkImageCreateFlagBits'
enums['VkImageCreateFlagBits'] =  ['VK_IMAGE_CREATE_SPARSE_BINDING_BIT', 'VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT', 'VK_IMAGE_CREATE_SPARSE_ALIASED_BIT', 'VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT', 'VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT']
flags['VkImageCreateFlags'] =  'VkImageCreateFlagBits'
structs['VkExtent3D'] =  ['width', 'height', 'depth']
consts['VK_SAMPLE_COUNT_1_BIT'] =  'VkSampleCountFlagBits'
consts['VK_SAMPLE_COUNT_2_BIT'] =  'VkSampleCountFlagBits'
consts['VK_SAMPLE_COUNT_4_BIT'] =  'VkSampleCountFlagBits'
consts['VK_SAMPLE_COUNT_8_BIT'] =  'VkSampleCountFlagBits'
consts['VK_SAMPLE_COUNT_16_BIT'] =  'VkSampleCountFlagBits'
consts['VK_SAMPLE_COUNT_32_BIT'] =  'VkSampleCountFlagBits'
consts['VK_SAMPLE_COUNT_64_BIT'] =  'VkSampleCountFlagBits'
enums['VkSampleCountFlagBits'] =  ['VK_SAMPLE_COUNT_1_BIT', 'VK_SAMPLE_COUNT_2_BIT', 'VK_SAMPLE_COUNT_4_BIT', 'VK_SAMPLE_COUNT_8_BIT', 'VK_SAMPLE_COUNT_16_BIT', 'VK_SAMPLE_COUNT_32_BIT', 'VK_SAMPLE_COUNT_64_BIT']
flags['VkSampleCountFlags'] =  'VkSampleCountFlagBits'
# Unprocessed type: uint64_t
# Unprocessed type: VkDeviceSize category: basetype
structs['VkImageFormatProperties'] =  ['maxExtent', 'maxMipLevels', 'maxArrayLayers', 'sampleCounts', 'maxResourceSize']
protos['vkGetPhysicalDeviceImageFormatProperties'] =  ['physicalDevice', 'format', 'type', 'tiling', 'usage', 'flags', 'pImageFormatProperties']
consts['VK_PHYSICAL_DEVICE_TYPE_OTHER'] =  'VkPhysicalDeviceType'
consts['VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU'] =  'VkPhysicalDeviceType'
consts['VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU'] =  'VkPhysicalDeviceType'
consts['VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU'] =  'VkPhysicalDeviceType'
consts['VK_PHYSICAL_DEVICE_TYPE_CPU'] =  'VkPhysicalDeviceType'
enums['VkPhysicalDeviceType'] =  ['VK_PHYSICAL_DEVICE_TYPE_OTHER', 'VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU', 'VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU', 'VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU', 'VK_PHYSICAL_DEVICE_TYPE_CPU']
# Unprocessed type: uint8_t
# Unprocessed type: float
# Unprocessed type: int32_t
structs['VkPhysicalDeviceLimits'] =  ['maxImageDimension1D', 'maxImageDimension2D', 'maxImageDimension3D', 'maxImageDimensionCube', 'maxImageArrayLayers', 'maxTexelBufferElements', 'maxUniformBufferRange', 'maxStorageBufferRange', 'maxPushConstantsSize', 'maxMemoryAllocationCount', 'maxSamplerAllocationCount', 'bufferImageGranularity', 'sparseAddressSpaceSize', 'maxBoundDescriptorSets', 'maxPerStageDescriptorSamplers', 'maxPerStageDescriptorUniformBuffers', 'maxPerStageDescriptorStorageBuffers', 'maxPerStageDescriptorSampledImages', 'maxPerStageDescriptorStorageImages', 'maxPerStageDescriptorInputAttachments', 'maxPerStageResources', 'maxDescriptorSetSamplers', 'maxDescriptorSetUniformBuffers', 'maxDescriptorSetUniformBuffersDynamic', 'maxDescriptorSetStorageBuffers', 'maxDescriptorSetStorageBuffersDynamic', 'maxDescriptorSetSampledImages', 'maxDescriptorSetStorageImages', 'maxDescriptorSetInputAttachments', 'maxVertexInputAttributes', 'maxVertexInputBindings', 'maxVertexInputAttributeOffset', 'maxVertexInputBindingStride', 'maxVertexOutputComponents', 'maxTessellationGenerationLevel', 'maxTessellationPatchSize', 'maxTessellationControlPerVertexInputComponents', 'maxTessellationControlPerVertexOutputComponents', 'maxTessellationControlPerPatchOutputComponents', 'maxTessellationControlTotalOutputComponents', 'maxTessellationEvaluationInputComponents', 'maxTessellationEvaluationOutputComponents', 'maxGeometryShaderInvocations', 'maxGeometryInputComponents', 'maxGeometryOutputComponents', 'maxGeometryOutputVertices', 'maxGeometryTotalOutputComponents', 'maxFragmentInputComponents', 'maxFragmentOutputAttachments', 'maxFragmentDualSrcAttachments', 'maxFragmentCombinedOutputResources', 'maxComputeSharedMemorySize', 'maxComputeWorkGroupCount', 'maxComputeWorkGroupInvocations', 'maxComputeWorkGroupSize', 'subPixelPrecisionBits', 'subTexelPrecisionBits', 'mipmapPrecisionBits', 'maxDrawIndexedIndexValue', 'maxDrawIndirectCount', 'maxSamplerLodBias', 'maxSamplerAnisotropy', 'maxViewports', 'maxViewportDimensions', 'viewportBoundsRange', 'viewportSubPixelBits', 'minMemoryMapAlignment', 'minTexelBufferOffsetAlignment', 'minUniformBufferOffsetAlignment', 'minStorageBufferOffsetAlignment', 'minTexelOffset', 'maxTexelOffset', 'minTexelGatherOffset', 'maxTexelGatherOffset', 'minInterpolationOffset', 'maxInterpolationOffset', 'subPixelInterpolationOffsetBits', 'maxFramebufferWidth', 'maxFramebufferHeight', 'maxFramebufferLayers', 'framebufferColorSampleCounts', 'framebufferDepthSampleCounts', 'framebufferStencilSampleCounts', 'framebufferNoAttachmentsSampleCounts', 'maxColorAttachments', 'sampledImageColorSampleCounts', 'sampledImageIntegerSampleCounts', 'sampledImageDepthSampleCounts', 'sampledImageStencilSampleCounts', 'storageImageSampleCounts', 'maxSampleMaskWords', 'timestampComputeAndGraphics', 'timestampPeriod', 'maxClipDistances', 'maxCullDistances', 'maxCombinedClipAndCullDistances', 'discreteQueuePriorities', 'pointSizeRange', 'lineWidthRange', 'pointSizeGranularity', 'lineWidthGranularity', 'strictLines', 'standardSampleLocations', 'optimalBufferCopyOffsetAlignment', 'optimalBufferCopyRowPitchAlignment', 'nonCoherentAtomSize']
structs['VkPhysicalDeviceSparseProperties'] =  ['residencyStandard2DBlockShape', 'residencyStandard2DMultisampleBlockShape', 'residencyStandard3DBlockShape', 'residencyAlignedMipSize', 'residencyNonResidentStrict']
consts['VK_MAX_PHYSICAL_DEVICE_NAME_SIZE'] =  None
consts['VK_UUID_SIZE'] =  None
structs['VkPhysicalDeviceProperties'] =  ['apiVersion', 'driverVersion', 'vendorID', 'deviceID', 'deviceType', 'deviceName', 'pipelineCacheUUID', 'limits', 'sparseProperties']
protos['vkGetPhysicalDeviceProperties'] =  ['physicalDevice', 'pProperties']
consts['VK_QUEUE_GRAPHICS_BIT'] =  'VkQueueFlagBits'
consts['VK_QUEUE_COMPUTE_BIT'] =  'VkQueueFlagBits'
consts['VK_QUEUE_TRANSFER_BIT'] =  'VkQueueFlagBits'
consts['VK_QUEUE_SPARSE_BINDING_BIT'] =  'VkQueueFlagBits'
enums['VkQueueFlagBits'] =  ['VK_QUEUE_GRAPHICS_BIT', 'VK_QUEUE_COMPUTE_BIT', 'VK_QUEUE_TRANSFER_BIT', 'VK_QUEUE_SPARSE_BINDING_BIT']
flags['VkQueueFlags'] =  'VkQueueFlagBits'
structs['VkQueueFamilyProperties'] =  ['queueFlags', 'queueCount', 'timestampValidBits', 'minImageTransferGranularity']
protos['vkGetPhysicalDeviceQueueFamilyProperties'] =  ['physicalDevice', 'pQueueFamilyPropertyCount', 'pQueueFamilyProperties']
consts['VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT'] =  'VkMemoryPropertyFlagBits'
consts['VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT'] =  'VkMemoryPropertyFlagBits'
consts['VK_MEMORY_PROPERTY_HOST_COHERENT_BIT'] =  'VkMemoryPropertyFlagBits'
consts['VK_MEMORY_PROPERTY_HOST_CACHED_BIT'] =  'VkMemoryPropertyFlagBits'
consts['VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT'] =  'VkMemoryPropertyFlagBits'
enums['VkMemoryPropertyFlagBits'] =  ['VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT', 'VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT', 'VK_MEMORY_PROPERTY_HOST_COHERENT_BIT', 'VK_MEMORY_PROPERTY_HOST_CACHED_BIT', 'VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT']
flags['VkMemoryPropertyFlags'] =  'VkMemoryPropertyFlagBits'
structs['VkMemoryType'] =  ['propertyFlags', 'heapIndex']
consts['VK_MEMORY_HEAP_DEVICE_LOCAL_BIT'] =  'VkMemoryHeapFlagBits'
enums['VkMemoryHeapFlagBits'] =  ['VK_MEMORY_HEAP_DEVICE_LOCAL_BIT']
flags['VkMemoryHeapFlags'] =  'VkMemoryHeapFlagBits'
structs['VkMemoryHeap'] =  ['size', 'flags']
consts['VK_MAX_MEMORY_TYPES'] =  None
consts['VK_MAX_MEMORY_HEAPS'] =  None
structs['VkPhysicalDeviceMemoryProperties'] =  ['memoryTypeCount', 'memoryTypes', 'memoryHeapCount', 'memoryHeaps']
protos['vkGetPhysicalDeviceMemoryProperties'] =  ['physicalDevice', 'pMemoryProperties']
funcpointers['PFN_vkVoidFunction'] =  None
protos['vkGetInstanceProcAddr'] =  ['instance', 'pName']
structs['VkDevice'] =  None
protos['vkGetDeviceProcAddr'] =  ['device', 'pName']
flags['VkDeviceCreateFlags'] =  None
flags['VkDeviceQueueCreateFlags'] =  None
structs['VkDeviceQueueCreateInfo'] =  ['sType', 'pNext', 'flags', 'queueFamilyIndex', 'queueCount', 'pQueuePriorities']
structs['VkDeviceCreateInfo'] =  ['sType', 'pNext', 'flags', 'queueCreateInfoCount', 'pQueueCreateInfos', 'enabledLayerCount', 'ppEnabledLayerNames', 'enabledExtensionCount', 'ppEnabledExtensionNames', 'pEnabledFeatures']
protos['vkCreateDevice'] =  ['physicalDevice', 'pCreateInfo', 'pAllocator', 'pDevice']
protos['vkDestroyDevice'] =  ['device', 'pAllocator']
consts['VK_MAX_EXTENSION_NAME_SIZE'] =  None
structs['VkExtensionProperties'] =  ['extensionName', 'specVersion']
protos['vkEnumerateInstanceExtensionProperties'] =  ['pLayerName', 'pPropertyCount', 'pProperties']
protos['vkEnumerateDeviceExtensionProperties'] =  ['physicalDevice', 'pLayerName', 'pPropertyCount', 'pProperties']
consts['VK_MAX_DESCRIPTION_SIZE'] =  None
structs['VkLayerProperties'] =  ['layerName', 'specVersion', 'implementationVersion', 'description']
protos['vkEnumerateInstanceLayerProperties'] =  ['pPropertyCount', 'pProperties']
protos['vkEnumerateDeviceLayerProperties'] =  ['physicalDevice', 'pPropertyCount', 'pProperties']
structs['VkQueue'] =  None
protos['vkGetDeviceQueue'] =  ['device', 'queueFamilyIndex', 'queueIndex', 'pQueue']
structs['VK_DEFINE_NON_DISPATCHABLE_HANDLE'] =  None
structs['VkSemaphore'] =  None
consts['VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_VERTEX_INPUT_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_VERTEX_SHADER_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_TRANSFER_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_HOST_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT'] =  'VkPipelineStageFlagBits'
consts['VK_PIPELINE_STAGE_ALL_COMMANDS_BIT'] =  'VkPipelineStageFlagBits'
enums['VkPipelineStageFlagBits'] =  ['VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT', 'VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT', 'VK_PIPELINE_STAGE_VERTEX_INPUT_BIT', 'VK_PIPELINE_STAGE_VERTEX_SHADER_BIT', 'VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT', 'VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT', 'VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT', 'VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT', 'VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT', 'VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT', 'VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT', 'VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT', 'VK_PIPELINE_STAGE_TRANSFER_BIT', 'VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT', 'VK_PIPELINE_STAGE_HOST_BIT', 'VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT', 'VK_PIPELINE_STAGE_ALL_COMMANDS_BIT']
flags['VkPipelineStageFlags'] =  'VkPipelineStageFlagBits'
structs['VkCommandBuffer'] =  None
structs['VkSubmitInfo'] =  ['sType', 'pNext', 'waitSemaphoreCount', 'pWaitSemaphores', 'pWaitDstStageMask', 'commandBufferCount', 'pCommandBuffers', 'signalSemaphoreCount', 'pSignalSemaphores']
structs['VkFence'] =  None
protos['vkQueueSubmit'] =  ['queue', 'submitCount', 'pSubmits', 'fence']
protos['vkQueueWaitIdle'] =  ['queue']
protos['vkDeviceWaitIdle'] =  ['device']
structs['VkMemoryAllocateInfo'] =  ['sType', 'pNext', 'allocationSize', 'memoryTypeIndex']
structs['VkDeviceMemory'] =  None
protos['vkAllocateMemory'] =  ['device', 'pAllocateInfo', 'pAllocator', 'pMemory']
protos['vkFreeMemory'] =  ['device', 'memory', 'pAllocator']
flags['VkMemoryMapFlags'] =  None
protos['vkMapMemory'] =  ['device', 'memory', 'offset', 'size', 'flags', 'ppData']
protos['vkUnmapMemory'] =  ['device', 'memory']
structs['VkMappedMemoryRange'] =  ['sType', 'pNext', 'memory', 'offset', 'size']
protos['vkFlushMappedMemoryRanges'] =  ['device', 'memoryRangeCount', 'pMemoryRanges']
protos['vkInvalidateMappedMemoryRanges'] =  ['device', 'memoryRangeCount', 'pMemoryRanges']
protos['vkGetDeviceMemoryCommitment'] =  ['device', 'memory', 'pCommittedMemoryInBytes']
structs['VkBuffer'] =  None
protos['vkBindBufferMemory'] =  ['device', 'buffer', 'memory', 'memoryOffset']
structs['VkImage'] =  None
protos['vkBindImageMemory'] =  ['device', 'image', 'memory', 'memoryOffset']
structs['VkMemoryRequirements'] =  ['size', 'alignment', 'memoryTypeBits']
protos['vkGetBufferMemoryRequirements'] =  ['device', 'buffer', 'pMemoryRequirements']
protos['vkGetImageMemoryRequirements'] =  ['device', 'image', 'pMemoryRequirements']
consts['VK_IMAGE_ASPECT_COLOR_BIT'] =  'VkImageAspectFlagBits'
consts['VK_IMAGE_ASPECT_DEPTH_BIT'] =  'VkImageAspectFlagBits'
consts['VK_IMAGE_ASPECT_STENCIL_BIT'] =  'VkImageAspectFlagBits'
consts['VK_IMAGE_ASPECT_METADATA_BIT'] =  'VkImageAspectFlagBits'
enums['VkImageAspectFlagBits'] =  ['VK_IMAGE_ASPECT_COLOR_BIT', 'VK_IMAGE_ASPECT_DEPTH_BIT', 'VK_IMAGE_ASPECT_STENCIL_BIT', 'VK_IMAGE_ASPECT_METADATA_BIT']
flags['VkImageAspectFlags'] =  'VkImageAspectFlagBits'
consts['VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT'] =  'VkSparseImageFormatFlagBits'
consts['VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT'] =  'VkSparseImageFormatFlagBits'
consts['VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT'] =  'VkSparseImageFormatFlagBits'
enums['VkSparseImageFormatFlagBits'] =  ['VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT', 'VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT', 'VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT']
flags['VkSparseImageFormatFlags'] =  'VkSparseImageFormatFlagBits'
structs['VkSparseImageFormatProperties'] =  ['aspectMask', 'imageGranularity', 'flags']
structs['VkSparseImageMemoryRequirements'] =  ['formatProperties', 'imageMipTailFirstLod', 'imageMipTailSize', 'imageMipTailOffset', 'imageMipTailStride']
protos['vkGetImageSparseMemoryRequirements'] =  ['device', 'image', 'pSparseMemoryRequirementCount', 'pSparseMemoryRequirements']
protos['vkGetPhysicalDeviceSparseImageFormatProperties'] =  ['physicalDevice', 'format', 'type', 'samples', 'usage', 'tiling', 'pPropertyCount', 'pProperties']
consts['VK_SPARSE_MEMORY_BIND_METADATA_BIT'] =  'VkSparseMemoryBindFlagBits'
enums['VkSparseMemoryBindFlagBits'] =  ['VK_SPARSE_MEMORY_BIND_METADATA_BIT']
flags['VkSparseMemoryBindFlags'] =  'VkSparseMemoryBindFlagBits'
structs['VkSparseMemoryBind'] =  ['resourceOffset', 'size', 'memory', 'memoryOffset', 'flags']
structs['VkSparseBufferMemoryBindInfo'] =  ['buffer', 'bindCount', 'pBinds']
structs['VkSparseImageOpaqueMemoryBindInfo'] =  ['image', 'bindCount', 'pBinds']
structs['VkImageSubresource'] =  ['aspectMask', 'mipLevel', 'arrayLayer']
structs['VkOffset3D'] =  ['x', 'y', 'z']
structs['VkSparseImageMemoryBind'] =  ['subresource', 'offset', 'extent', 'memory', 'memoryOffset', 'flags']
structs['VkSparseImageMemoryBindInfo'] =  ['image', 'bindCount', 'pBinds']
structs['VkBindSparseInfo'] =  ['sType', 'pNext', 'waitSemaphoreCount', 'pWaitSemaphores', 'bufferBindCount', 'pBufferBinds', 'imageOpaqueBindCount', 'pImageOpaqueBinds', 'imageBindCount', 'pImageBinds', 'signalSemaphoreCount', 'pSignalSemaphores']
protos['vkQueueBindSparse'] =  ['queue', 'bindInfoCount', 'pBindInfo', 'fence']
consts['VK_FENCE_CREATE_SIGNALED_BIT'] =  'VkFenceCreateFlagBits'
enums['VkFenceCreateFlagBits'] =  ['VK_FENCE_CREATE_SIGNALED_BIT']
flags['VkFenceCreateFlags'] =  'VkFenceCreateFlagBits'
structs['VkFenceCreateInfo'] =  ['sType', 'pNext', 'flags']
protos['vkCreateFence'] =  ['device', 'pCreateInfo', 'pAllocator', 'pFence']
protos['vkDestroyFence'] =  ['device', 'fence', 'pAllocator']
protos['vkResetFences'] =  ['device', 'fenceCount', 'pFences']
protos['vkGetFenceStatus'] =  ['device', 'fence']
protos['vkWaitForFences'] =  ['device', 'fenceCount', 'pFences', 'waitAll', 'timeout']
flags['VkSemaphoreCreateFlags'] =  None
structs['VkSemaphoreCreateInfo'] =  ['sType', 'pNext', 'flags']
protos['vkCreateSemaphore'] =  ['device', 'pCreateInfo', 'pAllocator', 'pSemaphore']
protos['vkDestroySemaphore'] =  ['device', 'semaphore', 'pAllocator']
flags['VkEventCreateFlags'] =  None
structs['VkEventCreateInfo'] =  ['sType', 'pNext', 'flags']
structs['VkEvent'] =  None
protos['vkCreateEvent'] =  ['device', 'pCreateInfo', 'pAllocator', 'pEvent']
protos['vkDestroyEvent'] =  ['device', 'event', 'pAllocator']
protos['vkGetEventStatus'] =  ['device', 'event']
protos['vkSetEvent'] =  ['device', 'event']
protos['vkResetEvent'] =  ['device', 'event']
flags['VkQueryPoolCreateFlags'] =  None
consts['VK_QUERY_TYPE_OCCLUSION'] =  'VkQueryType'
consts['VK_QUERY_TYPE_PIPELINE_STATISTICS'] =  'VkQueryType'
consts['VK_QUERY_TYPE_TIMESTAMP'] =  'VkQueryType'
enums['VkQueryType'] =  ['VK_QUERY_TYPE_OCCLUSION', 'VK_QUERY_TYPE_PIPELINE_STATISTICS', 'VK_QUERY_TYPE_TIMESTAMP']
consts['VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT'] =  'VkQueryPipelineStatisticFlagBits'
consts['VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT'] =  'VkQueryPipelineStatisticFlagBits'
enums['VkQueryPipelineStatisticFlagBits'] =  ['VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT', 'VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT', 'VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT', 'VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT', 'VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT', 'VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT', 'VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT', 'VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT', 'VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT', 'VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT', 'VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT']
flags['VkQueryPipelineStatisticFlags'] =  'VkQueryPipelineStatisticFlagBits'
structs['VkQueryPoolCreateInfo'] =  ['sType', 'pNext', 'flags', 'queryType', 'queryCount', 'pipelineStatistics']
structs['VkQueryPool'] =  None
protos['vkCreateQueryPool'] =  ['device', 'pCreateInfo', 'pAllocator', 'pQueryPool']
protos['vkDestroyQueryPool'] =  ['device', 'queryPool', 'pAllocator']
consts['VK_QUERY_RESULT_64_BIT'] =  'VkQueryResultFlagBits'
consts['VK_QUERY_RESULT_WAIT_BIT'] =  'VkQueryResultFlagBits'
consts['VK_QUERY_RESULT_WITH_AVAILABILITY_BIT'] =  'VkQueryResultFlagBits'
consts['VK_QUERY_RESULT_PARTIAL_BIT'] =  'VkQueryResultFlagBits'
enums['VkQueryResultFlagBits'] =  ['VK_QUERY_RESULT_64_BIT', 'VK_QUERY_RESULT_WAIT_BIT', 'VK_QUERY_RESULT_WITH_AVAILABILITY_BIT', 'VK_QUERY_RESULT_PARTIAL_BIT']
flags['VkQueryResultFlags'] =  'VkQueryResultFlagBits'
protos['vkGetQueryPoolResults'] =  ['device', 'queryPool', 'firstQuery', 'queryCount', 'dataSize', 'pData', 'stride', 'flags']
consts['VK_BUFFER_CREATE_SPARSE_BINDING_BIT'] =  'VkBufferCreateFlagBits'
consts['VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT'] =  'VkBufferCreateFlagBits'
consts['VK_BUFFER_CREATE_SPARSE_ALIASED_BIT'] =  'VkBufferCreateFlagBits'
enums['VkBufferCreateFlagBits'] =  ['VK_BUFFER_CREATE_SPARSE_BINDING_BIT', 'VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT', 'VK_BUFFER_CREATE_SPARSE_ALIASED_BIT']
flags['VkBufferCreateFlags'] =  'VkBufferCreateFlagBits'
consts['VK_BUFFER_USAGE_TRANSFER_SRC_BIT'] =  'VkBufferUsageFlagBits'
consts['VK_BUFFER_USAGE_TRANSFER_DST_BIT'] =  'VkBufferUsageFlagBits'
consts['VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT'] =  'VkBufferUsageFlagBits'
consts['VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT'] =  'VkBufferUsageFlagBits'
consts['VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT'] =  'VkBufferUsageFlagBits'
consts['VK_BUFFER_USAGE_STORAGE_BUFFER_BIT'] =  'VkBufferUsageFlagBits'
consts['VK_BUFFER_USAGE_INDEX_BUFFER_BIT'] =  'VkBufferUsageFlagBits'
consts['VK_BUFFER_USAGE_VERTEX_BUFFER_BIT'] =  'VkBufferUsageFlagBits'
consts['VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT'] =  'VkBufferUsageFlagBits'
enums['VkBufferUsageFlagBits'] =  ['VK_BUFFER_USAGE_TRANSFER_SRC_BIT', 'VK_BUFFER_USAGE_TRANSFER_DST_BIT', 'VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT', 'VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT', 'VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT', 'VK_BUFFER_USAGE_STORAGE_BUFFER_BIT', 'VK_BUFFER_USAGE_INDEX_BUFFER_BIT', 'VK_BUFFER_USAGE_VERTEX_BUFFER_BIT', 'VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT']
flags['VkBufferUsageFlags'] =  'VkBufferUsageFlagBits'
consts['VK_SHARING_MODE_EXCLUSIVE'] =  'VkSharingMode'
consts['VK_SHARING_MODE_CONCURRENT'] =  'VkSharingMode'
enums['VkSharingMode'] =  ['VK_SHARING_MODE_EXCLUSIVE', 'VK_SHARING_MODE_CONCURRENT']
structs['VkBufferCreateInfo'] =  ['sType', 'pNext', 'flags', 'size', 'usage', 'sharingMode', 'queueFamilyIndexCount', 'pQueueFamilyIndices']
protos['vkCreateBuffer'] =  ['device', 'pCreateInfo', 'pAllocator', 'pBuffer']
protos['vkDestroyBuffer'] =  ['device', 'buffer', 'pAllocator']
flags['VkBufferViewCreateFlags'] =  None
structs['VkBufferViewCreateInfo'] =  ['sType', 'pNext', 'flags', 'buffer', 'format', 'offset', 'range']
structs['VkBufferView'] =  None
protos['vkCreateBufferView'] =  ['device', 'pCreateInfo', 'pAllocator', 'pView']
protos['vkDestroyBufferView'] =  ['device', 'bufferView', 'pAllocator']
consts['VK_IMAGE_LAYOUT_UNDEFINED'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_GENERAL'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_PREINITIALIZED'] =  'VkImageLayout'
consts['VK_IMAGE_LAYOUT_PRESENT_SRC_KHR'] =  'VkImageLayout'
enums['VkImageLayout'] =  ['VK_IMAGE_LAYOUT_UNDEFINED', 'VK_IMAGE_LAYOUT_GENERAL', 'VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL', 'VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL', 'VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL', 'VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL', 'VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL', 'VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL', 'VK_IMAGE_LAYOUT_PREINITIALIZED', 'VK_IMAGE_LAYOUT_PRESENT_SRC_KHR']
structs['VkImageCreateInfo'] =  ['sType', 'pNext', 'flags', 'imageType', 'format', 'extent', 'mipLevels', 'arrayLayers', 'samples', 'tiling', 'usage', 'sharingMode', 'queueFamilyIndexCount', 'pQueueFamilyIndices', 'initialLayout']
protos['vkCreateImage'] =  ['device', 'pCreateInfo', 'pAllocator', 'pImage']
protos['vkDestroyImage'] =  ['device', 'image', 'pAllocator']
structs['VkSubresourceLayout'] =  ['offset', 'size', 'rowPitch', 'arrayPitch', 'depthPitch']
protos['vkGetImageSubresourceLayout'] =  ['device', 'image', 'pSubresource', 'pLayout']
flags['VkImageViewCreateFlags'] =  None
consts['VK_IMAGE_VIEW_TYPE_1D'] =  'VkImageViewType'
consts['VK_IMAGE_VIEW_TYPE_2D'] =  'VkImageViewType'
consts['VK_IMAGE_VIEW_TYPE_3D'] =  'VkImageViewType'
consts['VK_IMAGE_VIEW_TYPE_CUBE'] =  'VkImageViewType'
consts['VK_IMAGE_VIEW_TYPE_1D_ARRAY'] =  'VkImageViewType'
consts['VK_IMAGE_VIEW_TYPE_2D_ARRAY'] =  'VkImageViewType'
consts['VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'] =  'VkImageViewType'
enums['VkImageViewType'] =  ['VK_IMAGE_VIEW_TYPE_1D', 'VK_IMAGE_VIEW_TYPE_2D', 'VK_IMAGE_VIEW_TYPE_3D', 'VK_IMAGE_VIEW_TYPE_CUBE', 'VK_IMAGE_VIEW_TYPE_1D_ARRAY', 'VK_IMAGE_VIEW_TYPE_2D_ARRAY', 'VK_IMAGE_VIEW_TYPE_CUBE_ARRAY']
consts['VK_COMPONENT_SWIZZLE_IDENTITY'] =  'VkComponentSwizzle'
consts['VK_COMPONENT_SWIZZLE_ZERO'] =  'VkComponentSwizzle'
consts['VK_COMPONENT_SWIZZLE_ONE'] =  'VkComponentSwizzle'
consts['VK_COMPONENT_SWIZZLE_R'] =  'VkComponentSwizzle'
consts['VK_COMPONENT_SWIZZLE_G'] =  'VkComponentSwizzle'
consts['VK_COMPONENT_SWIZZLE_B'] =  'VkComponentSwizzle'
consts['VK_COMPONENT_SWIZZLE_A'] =  'VkComponentSwizzle'
enums['VkComponentSwizzle'] =  ['VK_COMPONENT_SWIZZLE_IDENTITY', 'VK_COMPONENT_SWIZZLE_ZERO', 'VK_COMPONENT_SWIZZLE_ONE', 'VK_COMPONENT_SWIZZLE_R', 'VK_COMPONENT_SWIZZLE_G', 'VK_COMPONENT_SWIZZLE_B', 'VK_COMPONENT_SWIZZLE_A']
structs['VkComponentMapping'] =  ['r', 'g', 'b', 'a']
structs['VkImageSubresourceRange'] =  ['aspectMask', 'baseMipLevel', 'levelCount', 'baseArrayLayer', 'layerCount']
structs['VkImageViewCreateInfo'] =  ['sType', 'pNext', 'flags', 'image', 'viewType', 'format', 'components', 'subresourceRange']
structs['VkImageView'] =  None
protos['vkCreateImageView'] =  ['device', 'pCreateInfo', 'pAllocator', 'pView']
protos['vkDestroyImageView'] =  ['device', 'imageView', 'pAllocator']
flags['VkShaderModuleCreateFlags'] =  None
structs['VkShaderModuleCreateInfo'] =  ['sType', 'pNext', 'flags', 'codeSize', 'pCode']
structs['VkShaderModule'] =  None
protos['vkCreateShaderModule'] =  ['device', 'pCreateInfo', 'pAllocator', 'pShaderModule']
protos['vkDestroyShaderModule'] =  ['device', 'shaderModule', 'pAllocator']
flags['VkPipelineCacheCreateFlags'] =  None
structs['VkPipelineCacheCreateInfo'] =  ['sType', 'pNext', 'flags', 'initialDataSize', 'pInitialData']
structs['VkPipelineCache'] =  None
protos['vkCreatePipelineCache'] =  ['device', 'pCreateInfo', 'pAllocator', 'pPipelineCache']
protos['vkDestroyPipelineCache'] =  ['device', 'pipelineCache', 'pAllocator']
protos['vkGetPipelineCacheData'] =  ['device', 'pipelineCache', 'pDataSize', 'pData']
protos['vkMergePipelineCaches'] =  ['device', 'dstCache', 'srcCacheCount', 'pSrcCaches']
consts['VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT'] =  'VkPipelineCreateFlagBits'
consts['VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT'] =  'VkPipelineCreateFlagBits'
consts['VK_PIPELINE_CREATE_DERIVATIVE_BIT'] =  'VkPipelineCreateFlagBits'
enums['VkPipelineCreateFlagBits'] =  ['VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT', 'VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT', 'VK_PIPELINE_CREATE_DERIVATIVE_BIT']
flags['VkPipelineCreateFlags'] =  'VkPipelineCreateFlagBits'
flags['VkPipelineShaderStageCreateFlags'] =  None
consts['VK_SHADER_STAGE_VERTEX_BIT'] =  'VkShaderStageFlagBits'
consts['VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT'] =  'VkShaderStageFlagBits'
consts['VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT'] =  'VkShaderStageFlagBits'
consts['VK_SHADER_STAGE_GEOMETRY_BIT'] =  'VkShaderStageFlagBits'
consts['VK_SHADER_STAGE_FRAGMENT_BIT'] =  'VkShaderStageFlagBits'
consts['VK_SHADER_STAGE_COMPUTE_BIT'] =  'VkShaderStageFlagBits'
consts['VK_SHADER_STAGE_ALL_GRAPHICS'] =  'VkShaderStageFlagBits'
consts['VK_SHADER_STAGE_ALL'] =  'VkShaderStageFlagBits'
enums['VkShaderStageFlagBits'] =  ['VK_SHADER_STAGE_VERTEX_BIT', 'VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT', 'VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT', 'VK_SHADER_STAGE_GEOMETRY_BIT', 'VK_SHADER_STAGE_FRAGMENT_BIT', 'VK_SHADER_STAGE_COMPUTE_BIT', 'VK_SHADER_STAGE_ALL_GRAPHICS', 'VK_SHADER_STAGE_ALL']
structs['VkSpecializationMapEntry'] =  ['constantID', 'offset', 'size']
structs['VkSpecializationInfo'] =  ['mapEntryCount', 'pMapEntries', 'dataSize', 'pData']
structs['VkPipelineShaderStageCreateInfo'] =  ['sType', 'pNext', 'flags', 'stage', 'module', 'pName', 'pSpecializationInfo']
flags['VkPipelineVertexInputStateCreateFlags'] =  None
consts['VK_VERTEX_INPUT_RATE_VERTEX'] =  'VkVertexInputRate'
consts['VK_VERTEX_INPUT_RATE_INSTANCE'] =  'VkVertexInputRate'
enums['VkVertexInputRate'] =  ['VK_VERTEX_INPUT_RATE_VERTEX', 'VK_VERTEX_INPUT_RATE_INSTANCE']
structs['VkVertexInputBindingDescription'] =  ['binding', 'stride', 'inputRate']
structs['VkVertexInputAttributeDescription'] =  ['location', 'binding', 'format', 'offset']
structs['VkPipelineVertexInputStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'vertexBindingDescriptionCount', 'pVertexBindingDescriptions', 'vertexAttributeDescriptionCount', 'pVertexAttributeDescriptions']
flags['VkPipelineInputAssemblyStateCreateFlags'] =  None
consts['VK_PRIMITIVE_TOPOLOGY_POINT_LIST'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_LINE_LIST'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_LINE_STRIP'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY'] =  'VkPrimitiveTopology'
consts['VK_PRIMITIVE_TOPOLOGY_PATCH_LIST'] =  'VkPrimitiveTopology'
enums['VkPrimitiveTopology'] =  ['VK_PRIMITIVE_TOPOLOGY_POINT_LIST', 'VK_PRIMITIVE_TOPOLOGY_LINE_LIST', 'VK_PRIMITIVE_TOPOLOGY_LINE_STRIP', 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST', 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP', 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN', 'VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY', 'VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY', 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY', 'VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY', 'VK_PRIMITIVE_TOPOLOGY_PATCH_LIST']
structs['VkPipelineInputAssemblyStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'topology', 'primitiveRestartEnable']
flags['VkPipelineTessellationStateCreateFlags'] =  None
structs['VkPipelineTessellationStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'patchControlPoints']
flags['VkPipelineViewportStateCreateFlags'] =  None
structs['VkViewport'] =  ['x', 'y', 'width', 'height', 'minDepth', 'maxDepth']
structs['VkOffset2D'] =  ['x', 'y']
structs['VkExtent2D'] =  ['width', 'height']
structs['VkRect2D'] =  ['offset', 'extent']
structs['VkPipelineViewportStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'viewportCount', 'pViewports', 'scissorCount', 'pScissors']
flags['VkPipelineRasterizationStateCreateFlags'] =  None
consts['VK_POLYGON_MODE_FILL'] =  'VkPolygonMode'
consts['VK_POLYGON_MODE_LINE'] =  'VkPolygonMode'
consts['VK_POLYGON_MODE_POINT'] =  'VkPolygonMode'
enums['VkPolygonMode'] =  ['VK_POLYGON_MODE_FILL', 'VK_POLYGON_MODE_LINE', 'VK_POLYGON_MODE_POINT']
consts['VK_CULL_MODE_NONE'] =  'VkCullModeFlagBits'
consts['VK_CULL_MODE_FRONT_BIT'] =  'VkCullModeFlagBits'
consts['VK_CULL_MODE_BACK_BIT'] =  'VkCullModeFlagBits'
consts['VK_CULL_MODE_FRONT_AND_BACK'] =  'VkCullModeFlagBits'
enums['VkCullModeFlagBits'] =  ['VK_CULL_MODE_NONE', 'VK_CULL_MODE_FRONT_BIT', 'VK_CULL_MODE_BACK_BIT', 'VK_CULL_MODE_FRONT_AND_BACK']
flags['VkCullModeFlags'] =  'VkCullModeFlagBits'
consts['VK_FRONT_FACE_COUNTER_CLOCKWISE'] =  'VkFrontFace'
consts['VK_FRONT_FACE_CLOCKWISE'] =  'VkFrontFace'
enums['VkFrontFace'] =  ['VK_FRONT_FACE_COUNTER_CLOCKWISE', 'VK_FRONT_FACE_CLOCKWISE']
structs['VkPipelineRasterizationStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'depthClampEnable', 'rasterizerDiscardEnable', 'polygonMode', 'cullMode', 'frontFace', 'depthBiasEnable', 'depthBiasConstantFactor', 'depthBiasClamp', 'depthBiasSlopeFactor', 'lineWidth']
flags['VkPipelineMultisampleStateCreateFlags'] =  None
# Unprocessed type: VkSampleMask category: basetype
structs['VkPipelineMultisampleStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'rasterizationSamples', 'sampleShadingEnable', 'minSampleShading', 'pSampleMask', 'alphaToCoverageEnable', 'alphaToOneEnable']
flags['VkPipelineDepthStencilStateCreateFlags'] =  None
consts['VK_COMPARE_OP_NEVER'] =  'VkCompareOp'
consts['VK_COMPARE_OP_LESS'] =  'VkCompareOp'
consts['VK_COMPARE_OP_EQUAL'] =  'VkCompareOp'
consts['VK_COMPARE_OP_LESS_OR_EQUAL'] =  'VkCompareOp'
consts['VK_COMPARE_OP_GREATER'] =  'VkCompareOp'
consts['VK_COMPARE_OP_NOT_EQUAL'] =  'VkCompareOp'
consts['VK_COMPARE_OP_GREATER_OR_EQUAL'] =  'VkCompareOp'
consts['VK_COMPARE_OP_ALWAYS'] =  'VkCompareOp'
enums['VkCompareOp'] =  ['VK_COMPARE_OP_NEVER', 'VK_COMPARE_OP_LESS', 'VK_COMPARE_OP_EQUAL', 'VK_COMPARE_OP_LESS_OR_EQUAL', 'VK_COMPARE_OP_GREATER', 'VK_COMPARE_OP_NOT_EQUAL', 'VK_COMPARE_OP_GREATER_OR_EQUAL', 'VK_COMPARE_OP_ALWAYS']
consts['VK_STENCIL_OP_KEEP'] =  'VkStencilOp'
consts['VK_STENCIL_OP_ZERO'] =  'VkStencilOp'
consts['VK_STENCIL_OP_REPLACE'] =  'VkStencilOp'
consts['VK_STENCIL_OP_INCREMENT_AND_CLAMP'] =  'VkStencilOp'
consts['VK_STENCIL_OP_DECREMENT_AND_CLAMP'] =  'VkStencilOp'
consts['VK_STENCIL_OP_INVERT'] =  'VkStencilOp'
consts['VK_STENCIL_OP_INCREMENT_AND_WRAP'] =  'VkStencilOp'
consts['VK_STENCIL_OP_DECREMENT_AND_WRAP'] =  'VkStencilOp'
enums['VkStencilOp'] =  ['VK_STENCIL_OP_KEEP', 'VK_STENCIL_OP_ZERO', 'VK_STENCIL_OP_REPLACE', 'VK_STENCIL_OP_INCREMENT_AND_CLAMP', 'VK_STENCIL_OP_DECREMENT_AND_CLAMP', 'VK_STENCIL_OP_INVERT', 'VK_STENCIL_OP_INCREMENT_AND_WRAP', 'VK_STENCIL_OP_DECREMENT_AND_WRAP']
structs['VkStencilOpState'] =  ['failOp', 'passOp', 'depthFailOp', 'compareOp', 'compareMask', 'writeMask', 'reference']
structs['VkPipelineDepthStencilStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'depthTestEnable', 'depthWriteEnable', 'depthCompareOp', 'depthBoundsTestEnable', 'stencilTestEnable', 'front', 'back', 'minDepthBounds', 'maxDepthBounds']
flags['VkPipelineColorBlendStateCreateFlags'] =  None
consts['VK_LOGIC_OP_CLEAR'] =  'VkLogicOp'
consts['VK_LOGIC_OP_AND'] =  'VkLogicOp'
consts['VK_LOGIC_OP_AND_REVERSE'] =  'VkLogicOp'
consts['VK_LOGIC_OP_COPY'] =  'VkLogicOp'
consts['VK_LOGIC_OP_AND_INVERTED'] =  'VkLogicOp'
consts['VK_LOGIC_OP_NO_OP'] =  'VkLogicOp'
consts['VK_LOGIC_OP_XOR'] =  'VkLogicOp'
consts['VK_LOGIC_OP_OR'] =  'VkLogicOp'
consts['VK_LOGIC_OP_NOR'] =  'VkLogicOp'
consts['VK_LOGIC_OP_EQUIVALENT'] =  'VkLogicOp'
consts['VK_LOGIC_OP_INVERT'] =  'VkLogicOp'
consts['VK_LOGIC_OP_OR_REVERSE'] =  'VkLogicOp'
consts['VK_LOGIC_OP_COPY_INVERTED'] =  'VkLogicOp'
consts['VK_LOGIC_OP_OR_INVERTED'] =  'VkLogicOp'
consts['VK_LOGIC_OP_NAND'] =  'VkLogicOp'
consts['VK_LOGIC_OP_SET'] =  'VkLogicOp'
enums['VkLogicOp'] =  ['VK_LOGIC_OP_CLEAR', 'VK_LOGIC_OP_AND', 'VK_LOGIC_OP_AND_REVERSE', 'VK_LOGIC_OP_COPY', 'VK_LOGIC_OP_AND_INVERTED', 'VK_LOGIC_OP_NO_OP', 'VK_LOGIC_OP_XOR', 'VK_LOGIC_OP_OR', 'VK_LOGIC_OP_NOR', 'VK_LOGIC_OP_EQUIVALENT', 'VK_LOGIC_OP_INVERT', 'VK_LOGIC_OP_OR_REVERSE', 'VK_LOGIC_OP_COPY_INVERTED', 'VK_LOGIC_OP_OR_INVERTED', 'VK_LOGIC_OP_NAND', 'VK_LOGIC_OP_SET']
consts['VK_BLEND_FACTOR_ZERO'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_SRC_COLOR'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_DST_COLOR'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_SRC_ALPHA'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_DST_ALPHA'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_CONSTANT_COLOR'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_CONSTANT_ALPHA'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_SRC_ALPHA_SATURATE'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_SRC1_COLOR'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_SRC1_ALPHA'] =  'VkBlendFactor'
consts['VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA'] =  'VkBlendFactor'
enums['VkBlendFactor'] =  ['VK_BLEND_FACTOR_ZERO', 'VK_BLEND_FACTOR_ONE', 'VK_BLEND_FACTOR_SRC_COLOR', 'VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR', 'VK_BLEND_FACTOR_DST_COLOR', 'VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR', 'VK_BLEND_FACTOR_SRC_ALPHA', 'VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA', 'VK_BLEND_FACTOR_DST_ALPHA', 'VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA', 'VK_BLEND_FACTOR_CONSTANT_COLOR', 'VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR', 'VK_BLEND_FACTOR_CONSTANT_ALPHA', 'VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA', 'VK_BLEND_FACTOR_SRC_ALPHA_SATURATE', 'VK_BLEND_FACTOR_SRC1_COLOR', 'VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR', 'VK_BLEND_FACTOR_SRC1_ALPHA', 'VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA']
consts['VK_BLEND_OP_ADD'] =  'VkBlendOp'
consts['VK_BLEND_OP_SUBTRACT'] =  'VkBlendOp'
consts['VK_BLEND_OP_REVERSE_SUBTRACT'] =  'VkBlendOp'
consts['VK_BLEND_OP_MIN'] =  'VkBlendOp'
consts['VK_BLEND_OP_MAX'] =  'VkBlendOp'
enums['VkBlendOp'] =  ['VK_BLEND_OP_ADD', 'VK_BLEND_OP_SUBTRACT', 'VK_BLEND_OP_REVERSE_SUBTRACT', 'VK_BLEND_OP_MIN', 'VK_BLEND_OP_MAX']
consts['VK_COLOR_COMPONENT_R_BIT'] =  'VkColorComponentFlagBits'
consts['VK_COLOR_COMPONENT_G_BIT'] =  'VkColorComponentFlagBits'
consts['VK_COLOR_COMPONENT_B_BIT'] =  'VkColorComponentFlagBits'
consts['VK_COLOR_COMPONENT_A_BIT'] =  'VkColorComponentFlagBits'
enums['VkColorComponentFlagBits'] =  ['VK_COLOR_COMPONENT_R_BIT', 'VK_COLOR_COMPONENT_G_BIT', 'VK_COLOR_COMPONENT_B_BIT', 'VK_COLOR_COMPONENT_A_BIT']
flags['VkColorComponentFlags'] =  'VkColorComponentFlagBits'
structs['VkPipelineColorBlendAttachmentState'] =  ['blendEnable', 'srcColorBlendFactor', 'dstColorBlendFactor', 'colorBlendOp', 'srcAlphaBlendFactor', 'dstAlphaBlendFactor', 'alphaBlendOp', 'colorWriteMask']
structs['VkPipelineColorBlendStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'logicOpEnable', 'logicOp', 'attachmentCount', 'pAttachments', 'blendConstants']
flags['VkPipelineDynamicStateCreateFlags'] =  None
consts['VK_DYNAMIC_STATE_VIEWPORT'] =  'VkDynamicState'
consts['VK_DYNAMIC_STATE_SCISSOR'] =  'VkDynamicState'
consts['VK_DYNAMIC_STATE_LINE_WIDTH'] =  'VkDynamicState'
consts['VK_DYNAMIC_STATE_DEPTH_BIAS'] =  'VkDynamicState'
consts['VK_DYNAMIC_STATE_BLEND_CONSTANTS'] =  'VkDynamicState'
consts['VK_DYNAMIC_STATE_DEPTH_BOUNDS'] =  'VkDynamicState'
consts['VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK'] =  'VkDynamicState'
consts['VK_DYNAMIC_STATE_STENCIL_WRITE_MASK'] =  'VkDynamicState'
consts['VK_DYNAMIC_STATE_STENCIL_REFERENCE'] =  'VkDynamicState'
enums['VkDynamicState'] =  ['VK_DYNAMIC_STATE_VIEWPORT', 'VK_DYNAMIC_STATE_SCISSOR', 'VK_DYNAMIC_STATE_LINE_WIDTH', 'VK_DYNAMIC_STATE_DEPTH_BIAS', 'VK_DYNAMIC_STATE_BLEND_CONSTANTS', 'VK_DYNAMIC_STATE_DEPTH_BOUNDS', 'VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK', 'VK_DYNAMIC_STATE_STENCIL_WRITE_MASK', 'VK_DYNAMIC_STATE_STENCIL_REFERENCE']
structs['VkPipelineDynamicStateCreateInfo'] =  ['sType', 'pNext', 'flags', 'dynamicStateCount', 'pDynamicStates']
structs['VkPipelineLayout'] =  None
structs['VkRenderPass'] =  None
structs['VkPipeline'] =  None
structs['VkGraphicsPipelineCreateInfo'] =  ['sType', 'pNext', 'flags', 'stageCount', 'pStages', 'pVertexInputState', 'pInputAssemblyState', 'pTessellationState', 'pViewportState', 'pRasterizationState', 'pMultisampleState', 'pDepthStencilState', 'pColorBlendState', 'pDynamicState', 'layout', 'renderPass', 'subpass', 'basePipelineHandle', 'basePipelineIndex']
protos['vkCreateGraphicsPipelines'] =  ['device', 'pipelineCache', 'createInfoCount', 'pCreateInfos', 'pAllocator', 'pPipelines']
structs['VkComputePipelineCreateInfo'] =  ['sType', 'pNext', 'flags', 'stage', 'layout', 'basePipelineHandle', 'basePipelineIndex']
protos['vkCreateComputePipelines'] =  ['device', 'pipelineCache', 'createInfoCount', 'pCreateInfos', 'pAllocator', 'pPipelines']
protos['vkDestroyPipeline'] =  ['device', 'pipeline', 'pAllocator']
flags['VkPipelineLayoutCreateFlags'] =  None
structs['VkDescriptorSetLayout'] =  None
flags['VkShaderStageFlags'] =  'VkShaderStageFlagBits'
structs['VkPushConstantRange'] =  ['stageFlags', 'offset', 'size']
structs['VkPipelineLayoutCreateInfo'] =  ['sType', 'pNext', 'flags', 'setLayoutCount', 'pSetLayouts', 'pushConstantRangeCount', 'pPushConstantRanges']
protos['vkCreatePipelineLayout'] =  ['device', 'pCreateInfo', 'pAllocator', 'pPipelineLayout']
protos['vkDestroyPipelineLayout'] =  ['device', 'pipelineLayout', 'pAllocator']
flags['VkSamplerCreateFlags'] =  None
consts['VK_FILTER_NEAREST'] =  'VkFilter'
consts['VK_FILTER_LINEAR'] =  'VkFilter'
consts['VK_FILTER_CUBIC_IMG'] =  'VkFilter'
enums['VkFilter'] =  ['VK_FILTER_NEAREST', 'VK_FILTER_LINEAR', 'VK_FILTER_CUBIC_IMG']
consts['VK_SAMPLER_MIPMAP_MODE_NEAREST'] =  'VkSamplerMipmapMode'
consts['VK_SAMPLER_MIPMAP_MODE_LINEAR'] =  'VkSamplerMipmapMode'
enums['VkSamplerMipmapMode'] =  ['VK_SAMPLER_MIPMAP_MODE_NEAREST', 'VK_SAMPLER_MIPMAP_MODE_LINEAR']
consts['VK_SAMPLER_ADDRESS_MODE_REPEAT'] =  'VkSamplerAddressMode'
consts['VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT'] =  'VkSamplerAddressMode'
consts['VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE'] =  'VkSamplerAddressMode'
consts['VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER'] =  'VkSamplerAddressMode'
consts['VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE'] =  'VkSamplerAddressMode'
enums['VkSamplerAddressMode'] =  ['VK_SAMPLER_ADDRESS_MODE_REPEAT', 'VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT', 'VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE', 'VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER', 'VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE']
consts['VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK'] =  'VkBorderColor'
consts['VK_BORDER_COLOR_INT_TRANSPARENT_BLACK'] =  'VkBorderColor'
consts['VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK'] =  'VkBorderColor'
consts['VK_BORDER_COLOR_INT_OPAQUE_BLACK'] =  'VkBorderColor'
consts['VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE'] =  'VkBorderColor'
consts['VK_BORDER_COLOR_INT_OPAQUE_WHITE'] =  'VkBorderColor'
enums['VkBorderColor'] =  ['VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK', 'VK_BORDER_COLOR_INT_TRANSPARENT_BLACK', 'VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK', 'VK_BORDER_COLOR_INT_OPAQUE_BLACK', 'VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE', 'VK_BORDER_COLOR_INT_OPAQUE_WHITE']
structs['VkSamplerCreateInfo'] =  ['sType', 'pNext', 'flags', 'magFilter', 'minFilter', 'mipmapMode', 'addressModeU', 'addressModeV', 'addressModeW', 'mipLodBias', 'anisotropyEnable', 'maxAnisotropy', 'compareEnable', 'compareOp', 'minLod', 'maxLod', 'borderColor', 'unnormalizedCoordinates']
structs['VkSampler'] =  None
protos['vkCreateSampler'] =  ['device', 'pCreateInfo', 'pAllocator', 'pSampler']
protos['vkDestroySampler'] =  ['device', 'sampler', 'pAllocator']
flags['VkDescriptorSetLayoutCreateFlags'] =  None
consts['VK_DESCRIPTOR_TYPE_SAMPLER'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_STORAGE_IMAGE'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_STORAGE_BUFFER'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC'] =  'VkDescriptorType'
consts['VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT'] =  'VkDescriptorType'
enums['VkDescriptorType'] =  ['VK_DESCRIPTOR_TYPE_SAMPLER', 'VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER', 'VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE', 'VK_DESCRIPTOR_TYPE_STORAGE_IMAGE', 'VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER', 'VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER', 'VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER', 'VK_DESCRIPTOR_TYPE_STORAGE_BUFFER', 'VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC', 'VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC', 'VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT']
structs['VkDescriptorSetLayoutBinding'] =  ['binding', 'descriptorType', 'descriptorCount', 'stageFlags', 'pImmutableSamplers']
structs['VkDescriptorSetLayoutCreateInfo'] =  ['sType', 'pNext', 'flags', 'bindingCount', 'pBindings']
protos['vkCreateDescriptorSetLayout'] =  ['device', 'pCreateInfo', 'pAllocator', 'pSetLayout']
protos['vkDestroyDescriptorSetLayout'] =  ['device', 'descriptorSetLayout', 'pAllocator']
consts['VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT'] =  'VkDescriptorPoolCreateFlagBits'
enums['VkDescriptorPoolCreateFlagBits'] =  ['VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT']
flags['VkDescriptorPoolCreateFlags'] =  'VkDescriptorPoolCreateFlagBits'
structs['VkDescriptorPoolSize'] =  ['type', 'descriptorCount']
structs['VkDescriptorPoolCreateInfo'] =  ['sType', 'pNext', 'flags', 'maxSets', 'poolSizeCount', 'pPoolSizes']
structs['VkDescriptorPool'] =  None
protos['vkCreateDescriptorPool'] =  ['device', 'pCreateInfo', 'pAllocator', 'pDescriptorPool']
protos['vkDestroyDescriptorPool'] =  ['device', 'descriptorPool', 'pAllocator']
flags['VkDescriptorPoolResetFlags'] =  None
protos['vkResetDescriptorPool'] =  ['device', 'descriptorPool', 'flags']
structs['VkDescriptorSetAllocateInfo'] =  ['sType', 'pNext', 'descriptorPool', 'descriptorSetCount', 'pSetLayouts']
structs['VkDescriptorSet'] =  None
protos['vkAllocateDescriptorSets'] =  ['device', 'pAllocateInfo', 'pDescriptorSets']
protos['vkFreeDescriptorSets'] =  ['device', 'descriptorPool', 'descriptorSetCount', 'pDescriptorSets']
structs['VkDescriptorImageInfo'] =  ['sampler', 'imageView', 'imageLayout']
structs['VkDescriptorBufferInfo'] =  ['buffer', 'offset', 'range']
structs['VkWriteDescriptorSet'] =  ['sType', 'pNext', 'dstSet', 'dstBinding', 'dstArrayElement', 'descriptorCount', 'descriptorType', 'pImageInfo', 'pBufferInfo', 'pTexelBufferView']
structs['VkCopyDescriptorSet'] =  ['sType', 'pNext', 'srcSet', 'srcBinding', 'srcArrayElement', 'dstSet', 'dstBinding', 'dstArrayElement', 'descriptorCount']
protos['vkUpdateDescriptorSets'] =  ['device', 'descriptorWriteCount', 'pDescriptorWrites', 'descriptorCopyCount', 'pDescriptorCopies']
flags['VkFramebufferCreateFlags'] =  None
structs['VkFramebufferCreateInfo'] =  ['sType', 'pNext', 'flags', 'renderPass', 'attachmentCount', 'pAttachments', 'width', 'height', 'layers']
structs['VkFramebuffer'] =  None
protos['vkCreateFramebuffer'] =  ['device', 'pCreateInfo', 'pAllocator', 'pFramebuffer']
protos['vkDestroyFramebuffer'] =  ['device', 'framebuffer', 'pAllocator']
flags['VkRenderPassCreateFlags'] =  None
consts['VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT'] =  'VkAttachmentDescriptionFlagBits'
enums['VkAttachmentDescriptionFlagBits'] =  ['VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT']
flags['VkAttachmentDescriptionFlags'] =  'VkAttachmentDescriptionFlagBits'
consts['VK_ATTACHMENT_LOAD_OP_LOAD'] =  'VkAttachmentLoadOp'
consts['VK_ATTACHMENT_LOAD_OP_CLEAR'] =  'VkAttachmentLoadOp'
consts['VK_ATTACHMENT_LOAD_OP_DONT_CARE'] =  'VkAttachmentLoadOp'
enums['VkAttachmentLoadOp'] =  ['VK_ATTACHMENT_LOAD_OP_LOAD', 'VK_ATTACHMENT_LOAD_OP_CLEAR', 'VK_ATTACHMENT_LOAD_OP_DONT_CARE']
consts['VK_ATTACHMENT_STORE_OP_STORE'] =  'VkAttachmentStoreOp'
consts['VK_ATTACHMENT_STORE_OP_DONT_CARE'] =  'VkAttachmentStoreOp'
enums['VkAttachmentStoreOp'] =  ['VK_ATTACHMENT_STORE_OP_STORE', 'VK_ATTACHMENT_STORE_OP_DONT_CARE']
structs['VkAttachmentDescription'] =  ['flags', 'format', 'samples', 'loadOp', 'storeOp', 'stencilLoadOp', 'stencilStoreOp', 'initialLayout', 'finalLayout']
flags['VkSubpassDescriptionFlags'] =  None
consts['VK_PIPELINE_BIND_POINT_GRAPHICS'] =  'VkPipelineBindPoint'
consts['VK_PIPELINE_BIND_POINT_COMPUTE'] =  'VkPipelineBindPoint'
enums['VkPipelineBindPoint'] =  ['VK_PIPELINE_BIND_POINT_GRAPHICS', 'VK_PIPELINE_BIND_POINT_COMPUTE']
structs['VkAttachmentReference'] =  ['attachment', 'layout']
structs['VkSubpassDescription'] =  ['flags', 'pipelineBindPoint', 'inputAttachmentCount', 'pInputAttachments', 'colorAttachmentCount', 'pColorAttachments', 'pResolveAttachments', 'pDepthStencilAttachment', 'preserveAttachmentCount', 'pPreserveAttachments']
consts['VK_ACCESS_INDIRECT_COMMAND_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_INDEX_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_UNIFORM_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_INPUT_ATTACHMENT_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_SHADER_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_SHADER_WRITE_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_COLOR_ATTACHMENT_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_TRANSFER_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_TRANSFER_WRITE_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_HOST_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_HOST_WRITE_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_MEMORY_READ_BIT'] =  'VkAccessFlagBits'
consts['VK_ACCESS_MEMORY_WRITE_BIT'] =  'VkAccessFlagBits'
enums['VkAccessFlagBits'] =  ['VK_ACCESS_INDIRECT_COMMAND_READ_BIT', 'VK_ACCESS_INDEX_READ_BIT', 'VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT', 'VK_ACCESS_UNIFORM_READ_BIT', 'VK_ACCESS_INPUT_ATTACHMENT_READ_BIT', 'VK_ACCESS_SHADER_READ_BIT', 'VK_ACCESS_SHADER_WRITE_BIT', 'VK_ACCESS_COLOR_ATTACHMENT_READ_BIT', 'VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT', 'VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT', 'VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT', 'VK_ACCESS_TRANSFER_READ_BIT', 'VK_ACCESS_TRANSFER_WRITE_BIT', 'VK_ACCESS_HOST_READ_BIT', 'VK_ACCESS_HOST_WRITE_BIT', 'VK_ACCESS_MEMORY_READ_BIT', 'VK_ACCESS_MEMORY_WRITE_BIT']
flags['VkAccessFlags'] =  'VkAccessFlagBits'
consts['VK_DEPENDENCY_BY_REGION_BIT'] =  'VkDependencyFlagBits'
enums['VkDependencyFlagBits'] =  ['VK_DEPENDENCY_BY_REGION_BIT']
flags['VkDependencyFlags'] =  'VkDependencyFlagBits'
structs['VkSubpassDependency'] =  ['srcSubpass', 'dstSubpass', 'srcStageMask', 'dstStageMask', 'srcAccessMask', 'dstAccessMask', 'dependencyFlags']
structs['VkRenderPassCreateInfo'] =  ['sType', 'pNext', 'flags', 'attachmentCount', 'pAttachments', 'subpassCount', 'pSubpasses', 'dependencyCount', 'pDependencies']
protos['vkCreateRenderPass'] =  ['device', 'pCreateInfo', 'pAllocator', 'pRenderPass']
protos['vkDestroyRenderPass'] =  ['device', 'renderPass', 'pAllocator']
protos['vkGetRenderAreaGranularity'] =  ['device', 'renderPass', 'pGranularity']
consts['VK_COMMAND_POOL_CREATE_TRANSIENT_BIT'] =  'VkCommandPoolCreateFlagBits'
consts['VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT'] =  'VkCommandPoolCreateFlagBits'
enums['VkCommandPoolCreateFlagBits'] =  ['VK_COMMAND_POOL_CREATE_TRANSIENT_BIT', 'VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT']
flags['VkCommandPoolCreateFlags'] =  'VkCommandPoolCreateFlagBits'
structs['VkCommandPoolCreateInfo'] =  ['sType', 'pNext', 'flags', 'queueFamilyIndex']
structs['VkCommandPool'] =  None
protos['vkCreateCommandPool'] =  ['device', 'pCreateInfo', 'pAllocator', 'pCommandPool']
protos['vkDestroyCommandPool'] =  ['device', 'commandPool', 'pAllocator']
consts['VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT'] =  'VkCommandPoolResetFlagBits'
enums['VkCommandPoolResetFlagBits'] =  ['VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT']
flags['VkCommandPoolResetFlags'] =  'VkCommandPoolResetFlagBits'
protos['vkResetCommandPool'] =  ['device', 'commandPool', 'flags']
consts['VK_COMMAND_BUFFER_LEVEL_PRIMARY'] =  'VkCommandBufferLevel'
consts['VK_COMMAND_BUFFER_LEVEL_SECONDARY'] =  'VkCommandBufferLevel'
enums['VkCommandBufferLevel'] =  ['VK_COMMAND_BUFFER_LEVEL_PRIMARY', 'VK_COMMAND_BUFFER_LEVEL_SECONDARY']
structs['VkCommandBufferAllocateInfo'] =  ['sType', 'pNext', 'commandPool', 'level', 'commandBufferCount']
protos['vkAllocateCommandBuffers'] =  ['device', 'pAllocateInfo', 'pCommandBuffers']
protos['vkFreeCommandBuffers'] =  ['device', 'commandPool', 'commandBufferCount', 'pCommandBuffers']
consts['VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT'] =  'VkCommandBufferUsageFlagBits'
consts['VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT'] =  'VkCommandBufferUsageFlagBits'
consts['VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT'] =  'VkCommandBufferUsageFlagBits'
enums['VkCommandBufferUsageFlagBits'] =  ['VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT', 'VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT', 'VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT']
flags['VkCommandBufferUsageFlags'] =  'VkCommandBufferUsageFlagBits'
consts['VK_QUERY_CONTROL_PRECISE_BIT'] =  'VkQueryControlFlagBits'
enums['VkQueryControlFlagBits'] =  ['VK_QUERY_CONTROL_PRECISE_BIT']
flags['VkQueryControlFlags'] =  'VkQueryControlFlagBits'
structs['VkCommandBufferInheritanceInfo'] =  ['sType', 'pNext', 'renderPass', 'subpass', 'framebuffer', 'occlusionQueryEnable', 'queryFlags', 'pipelineStatistics']
structs['VkCommandBufferBeginInfo'] =  ['sType', 'pNext', 'flags', 'pInheritanceInfo']
protos['vkBeginCommandBuffer'] =  ['commandBuffer', 'pBeginInfo']
protos['vkEndCommandBuffer'] =  ['commandBuffer']
consts['VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT'] =  'VkCommandBufferResetFlagBits'
enums['VkCommandBufferResetFlagBits'] =  ['VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT']
flags['VkCommandBufferResetFlags'] =  'VkCommandBufferResetFlagBits'
protos['vkResetCommandBuffer'] =  ['commandBuffer', 'flags']
protos['vkCmdBindPipeline'] =  ['commandBuffer', 'pipelineBindPoint', 'pipeline']
protos['vkCmdSetViewport'] =  ['commandBuffer', 'firstViewport', 'viewportCount', 'pViewports']
protos['vkCmdSetScissor'] =  ['commandBuffer', 'firstScissor', 'scissorCount', 'pScissors']
protos['vkCmdSetLineWidth'] =  ['commandBuffer', 'lineWidth']
protos['vkCmdSetDepthBias'] =  ['commandBuffer', 'depthBiasConstantFactor', 'depthBiasClamp', 'depthBiasSlopeFactor']
protos['vkCmdSetBlendConstants'] =  ['commandBuffer', 'blendConstants']
protos['vkCmdSetDepthBounds'] =  ['commandBuffer', 'minDepthBounds', 'maxDepthBounds']
consts['VK_STENCIL_FACE_FRONT_BIT'] =  'VkStencilFaceFlagBits'
consts['VK_STENCIL_FACE_BACK_BIT'] =  'VkStencilFaceFlagBits'
consts['VK_STENCIL_FRONT_AND_BACK'] =  'VkStencilFaceFlagBits'
enums['VkStencilFaceFlagBits'] =  ['VK_STENCIL_FACE_FRONT_BIT', 'VK_STENCIL_FACE_BACK_BIT', 'VK_STENCIL_FRONT_AND_BACK']
flags['VkStencilFaceFlags'] =  'VkStencilFaceFlagBits'
protos['vkCmdSetStencilCompareMask'] =  ['commandBuffer', 'faceMask', 'compareMask']
protos['vkCmdSetStencilWriteMask'] =  ['commandBuffer', 'faceMask', 'writeMask']
protos['vkCmdSetStencilReference'] =  ['commandBuffer', 'faceMask', 'reference']
protos['vkCmdBindDescriptorSets'] =  ['commandBuffer', 'pipelineBindPoint', 'layout', 'firstSet', 'descriptorSetCount', 'pDescriptorSets', 'dynamicOffsetCount', 'pDynamicOffsets']
consts['VK_INDEX_TYPE_UINT16'] =  'VkIndexType'
consts['VK_INDEX_TYPE_UINT32'] =  'VkIndexType'
enums['VkIndexType'] =  ['VK_INDEX_TYPE_UINT16', 'VK_INDEX_TYPE_UINT32']
protos['vkCmdBindIndexBuffer'] =  ['commandBuffer', 'buffer', 'offset', 'indexType']
protos['vkCmdBindVertexBuffers'] =  ['commandBuffer', 'firstBinding', 'bindingCount', 'pBuffers', 'pOffsets']
protos['vkCmdDraw'] =  ['commandBuffer', 'vertexCount', 'instanceCount', 'firstVertex', 'firstInstance']
protos['vkCmdDrawIndexed'] =  ['commandBuffer', 'indexCount', 'instanceCount', 'firstIndex', 'vertexOffset', 'firstInstance']
protos['vkCmdDrawIndirect'] =  ['commandBuffer', 'buffer', 'offset', 'drawCount', 'stride']
protos['vkCmdDrawIndexedIndirect'] =  ['commandBuffer', 'buffer', 'offset', 'drawCount', 'stride']
protos['vkCmdDispatch'] =  ['commandBuffer', 'x', 'y', 'z']
protos['vkCmdDispatchIndirect'] =  ['commandBuffer', 'buffer', 'offset']
structs['VkBufferCopy'] =  ['srcOffset', 'dstOffset', 'size']
protos['vkCmdCopyBuffer'] =  ['commandBuffer', 'srcBuffer', 'dstBuffer', 'regionCount', 'pRegions']
structs['VkImageSubresourceLayers'] =  ['aspectMask', 'mipLevel', 'baseArrayLayer', 'layerCount']
structs['VkImageCopy'] =  ['srcSubresource', 'srcOffset', 'dstSubresource', 'dstOffset', 'extent']
protos['vkCmdCopyImage'] =  ['commandBuffer', 'srcImage', 'srcImageLayout', 'dstImage', 'dstImageLayout', 'regionCount', 'pRegions']
structs['VkImageBlit'] =  ['srcSubresource', 'srcOffsets[2]', 'dstSubresource', 'dstOffsets[2]']
protos['vkCmdBlitImage'] =  ['commandBuffer', 'srcImage', 'srcImageLayout', 'dstImage', 'dstImageLayout', 'regionCount', 'pRegions', 'filter']
structs['VkBufferImageCopy'] =  ['bufferOffset', 'bufferRowLength', 'bufferImageHeight', 'imageSubresource', 'imageOffset', 'imageExtent']
protos['vkCmdCopyBufferToImage'] =  ['commandBuffer', 'srcBuffer', 'dstImage', 'dstImageLayout', 'regionCount', 'pRegions']
protos['vkCmdCopyImageToBuffer'] =  ['commandBuffer', 'srcImage', 'srcImageLayout', 'dstBuffer', 'regionCount', 'pRegions']
protos['vkCmdUpdateBuffer'] =  ['commandBuffer', 'dstBuffer', 'dstOffset', 'dataSize', 'pData']
protos['vkCmdFillBuffer'] =  ['commandBuffer', 'dstBuffer', 'dstOffset', 'size', 'data']
structs['VkClearColorValue'] =  ['float32', 'int32', 'uint32']
protos['vkCmdClearColorImage'] =  ['commandBuffer', 'image', 'imageLayout', 'pColor', 'rangeCount', 'pRanges']
structs['VkClearDepthStencilValue'] =  ['depth', 'stencil']
protos['vkCmdClearDepthStencilImage'] =  ['commandBuffer', 'image', 'imageLayout', 'pDepthStencil', 'rangeCount', 'pRanges']
structs['VkClearValue'] =  ['color', 'depthStencil']
structs['VkClearAttachment'] =  ['aspectMask', 'colorAttachment', 'clearValue']
structs['VkClearRect'] =  ['rect', 'baseArrayLayer', 'layerCount']
protos['vkCmdClearAttachments'] =  ['commandBuffer', 'attachmentCount', 'pAttachments', 'rectCount', 'pRects']
structs['VkImageResolve'] =  ['srcSubresource', 'srcOffset', 'dstSubresource', 'dstOffset', 'extent']
protos['vkCmdResolveImage'] =  ['commandBuffer', 'srcImage', 'srcImageLayout', 'dstImage', 'dstImageLayout', 'regionCount', 'pRegions']
protos['vkCmdSetEvent'] =  ['commandBuffer', 'event', 'stageMask']
protos['vkCmdResetEvent'] =  ['commandBuffer', 'event', 'stageMask']
structs['VkMemoryBarrier'] =  ['sType', 'pNext', 'srcAccessMask', 'dstAccessMask']
structs['VkBufferMemoryBarrier'] =  ['sType', 'pNext', 'srcAccessMask', 'dstAccessMask', 'srcQueueFamilyIndex', 'dstQueueFamilyIndex', 'buffer', 'offset', 'size']
structs['VkImageMemoryBarrier'] =  ['sType', 'pNext', 'srcAccessMask', 'dstAccessMask', 'oldLayout', 'newLayout', 'srcQueueFamilyIndex', 'dstQueueFamilyIndex', 'image', 'subresourceRange']
protos['vkCmdWaitEvents'] =  ['commandBuffer', 'eventCount', 'pEvents', 'srcStageMask', 'dstStageMask', 'memoryBarrierCount', 'pMemoryBarriers', 'bufferMemoryBarrierCount', 'pBufferMemoryBarriers', 'imageMemoryBarrierCount', 'pImageMemoryBarriers']
protos['vkCmdPipelineBarrier'] =  ['commandBuffer', 'srcStageMask', 'dstStageMask', 'dependencyFlags', 'memoryBarrierCount', 'pMemoryBarriers', 'bufferMemoryBarrierCount', 'pBufferMemoryBarriers', 'imageMemoryBarrierCount', 'pImageMemoryBarriers']
protos['vkCmdBeginQuery'] =  ['commandBuffer', 'queryPool', 'query', 'flags']
protos['vkCmdEndQuery'] =  ['commandBuffer', 'queryPool', 'query']
protos['vkCmdResetQueryPool'] =  ['commandBuffer', 'queryPool', 'firstQuery', 'queryCount']
protos['vkCmdWriteTimestamp'] =  ['commandBuffer', 'pipelineStage', 'queryPool', 'query']
protos['vkCmdCopyQueryPoolResults'] =  ['commandBuffer', 'queryPool', 'firstQuery', 'queryCount', 'dstBuffer', 'dstOffset', 'stride', 'flags']
protos['vkCmdPushConstants'] =  ['commandBuffer', 'layout', 'stageFlags', 'offset', 'size', 'pValues']
structs['VkRenderPassBeginInfo'] =  ['sType', 'pNext', 'renderPass', 'framebuffer', 'renderArea', 'clearValueCount', 'pClearValues']
consts['VK_SUBPASS_CONTENTS_INLINE'] =  'VkSubpassContents'
consts['VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS'] =  'VkSubpassContents'
enums['VkSubpassContents'] =  ['VK_SUBPASS_CONTENTS_INLINE', 'VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS']
protos['vkCmdBeginRenderPass'] =  ['commandBuffer', 'pRenderPassBegin', 'contents']
protos['vkCmdNextSubpass'] =  ['commandBuffer', 'contents']
protos['vkCmdEndRenderPass'] =  ['commandBuffer']
protos['vkCmdExecuteCommands'] =  ['commandBuffer', 'commandBufferCount', 'pCommandBuffers']
structs['VkDispatchIndirectCommand'] =  ['x', 'y', 'z']
structs['VkDrawIndexedIndirectCommand'] =  ['indexCount', 'instanceCount', 'firstIndex', 'vertexOffset', 'firstInstance']
structs['VkDrawIndirectCommand'] =  ['vertexCount', 'instanceCount', 'firstVertex', 'firstInstance']
consts['VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION'] =  None
consts['VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME'] =  None
consts['VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT'] =  'VkDebugReportObjectTypeEXT'
consts['VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT'] =  'VkDebugReportObjectTypeEXT'
enums['VkDebugReportObjectTypeEXT'] =  ['VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT', 'VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT']
structs['VkDebugMarkerObjectNameInfoEXT'] =  ['sType', 'pNext', 'objectType', 'object', 'pObjectName']
structs['VkDebugMarkerObjectTagInfoEXT'] =  ['sType', 'pNext', 'objectType', 'object', 'tagName', 'tagSize', 'pTag']
structs['VkDebugMarkerMarkerInfoEXT'] =  ['sType', 'pNext', 'pMarkerName', 'color']
consts['VK_EXT_DEBUG_MARKER_SPEC_VERSION'] =  None
consts['VK_EXT_DEBUG_MARKER_EXTENSION_NAME'] =  None
protos['vkDebugMarkerSetObjectTagEXT'] =  ['device', 'pTagInfo']
protos['vkDebugMarkerSetObjectNameEXT'] =  ['device', 'pNameInfo']
protos['vkCmdDebugMarkerBeginEXT'] =  ['commandBuffer', 'pMarkerInfo']
protos['vkCmdDebugMarkerEndEXT'] =  ['commandBuffer']
protos['vkCmdDebugMarkerInsertEXT'] =  ['commandBuffer', 'pMarkerInfo']
