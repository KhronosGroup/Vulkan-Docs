# Copyright 2018-2021 The Khronos Group Inc.
#
# SPDX-License-Identifier: Apache-2.0

# Gitlab CI file for vulkan spec and header generation

# All stages use the same Docker image, so there are no prerequisites
image: khronosgroup/docker-images:asciidoctor-spec

# Verify repository license compliance
license-check:
  stage: build
  before_script:
    # Nothing, all prerequisites are in the Docker image
  script:
    - reuse lint
  allow_failure: false

# Run various checker scripts on the spec and XML sources
# Separate from the generate step to set allow_failure: false
terminology_check:
  stage: build
  before_script:
    # Nothing, all prerequisites are in the Docker image
  script:
    # Internal self-test of the check_spec_links script
    - ( cd scripts && py.test-3 test*.py )
    - mkdir -p gen/out/checks
    # Generate a summary of problems for CI logs (if any)
    - scripts/check_spec_links.py --html=gen/out/checks/problems.html > /dev/null || true
    - make allchecks
  allow_failure: false

# Verify SPEC_VERSION = 1 for extension development branches
# This only runs on merge requests
spec_version_check:
  stage: build
  before_script:
    # Nothing, all prerequisites are in the Docker image
  script:
    # Only run the test if CI_COMMIT_BRANCH is defined
    - test -z "$CI_COMMIT_BRANCH" || scripts/testSpecVersion.py -branch $CI_COMMIT_BRANCH
  allow_failure: false

# Build the vulkan specification and generate any associated files (such as vulkan.h)
spec-generate:
  stage: build
  before_script:
    # Nothing, all prerequisites are in the Docker image
  script:
    - NODE_PATH="/usr/lib/node_modules"
    - export NODE_PATH
    # Build the actual spec (both chunked and single-page HTML), and other common targets
    - ./makeSpec -clean -spec all QUIET= -j${nproc} -Otarget manhtmlpages validusage styleguide registry chunked html
    # Build the core-only spec, to try and catch ifdef errors in extension markup
    - ./makeSpec -clean -spec core -genpath gencore QUIET= -j${nproc} -Otarget chunked html
    # Build headers, for use by all later stages
    - ( cd xml && make validate test install )
  artifacts:
    when: always
    paths:
      - src/
      - gen/
      - gencore/
    expire_in: 1 week

# Generate the vulkan C++ header (vulkan.hpp)
hpp-generate:
  stage: build
  before_script:
    - SPEC_DIR="${PWD}"
    - cd /tmp
    - rm -rf Vulkan-Hpp
    - git clone https://github.com/KhronosGroup/Vulkan-Hpp.git
    - cd Vulkan-Hpp
    - git submodule update --init --recursive -- tinyxml2
    - rm -rf Vulkan-Docs
    - cp -r "${SPEC_DIR}" Vulkan-Docs
    # Copy Vulkan C headers into subdir copy used by Vulkan-Hpp
    - cp -p ${SPEC_DIR}/include/vulkan/*.h Vulkan-Docs/include/vulkan/
  script:
    - cd /tmp/Vulkan-Hpp
    - cmake -H. -Bbuild
    - make -C build
    - cd build
    - ./VulkanHppGenerator "${SPEC_DIR}"/xml/vk.xml
  after_script:
    - mkdir -p Vulkan-Hpp/vulkan/
    - cp /tmp/Vulkan-Hpp/vulkan/*.hpp Vulkan-Hpp/vulkan/
  artifacts:
    paths:
      - Vulkan-Hpp/vulkan/
    expire_in: 1 week
  allow_failure: true

# Compile a simple test program that uses vulkan.h
# The fake platform headers in tests/ allow compiling with all Vulkan
# platforms at once.
h-compile:
  stage: test
  dependencies:
    - spec-generate
  before_script:
  # Nothing, all prerequisites are in the Docker image
  script:
    - gcc -c -std=c11 -Igen/include -Itests -Wall -Wextra -Werror tests/htest.c
    - clang -c -std=c11 -Igen/include -Itests -Wall -Wextra -Werror tests/htest.c

# Compile a simple test program that uses vulkan.hpp
hpp-compile:
  stage: test
  dependencies:
    - spec-generate
    - hpp-generate
  before_script:
    # Nothing, all prerequisites are in the Docker image
  script:
    - g++ -c -std=c++11 -Igen/include -IVulkan-Hpp -Wall -Wextra -Werror tests/hpptest.cpp
    - clang++ -c -std=c++11 -Igen/include -IVulkan-Hpp -Wall -Wextra -Werror tests/hpptest.cpp
  allow_failure: true
