// Copyright (c) 2018-2020 The Khronos Group, Inc.
//
// SPDX-License-Identifier: CC-BY-4.0

// This section is included inside the Resources chapter (resources.txt)

[[resources-acceleration-structures]]
== Acceleration Structures

[open,refpage='VkAccelerationStructureKHR',desc='Opaque handle to an acceleration structure object',type='handles']
--
:refpage: VkAccelerationStructureKHR

Acceleration structures are an opaque structure that is built by the
implementation to more efficiently perform spatial queries on the provided
geometric data.
For this extension, an acceleration structure is either a top-level
acceleration structure containing a set of bottom-level acceleration
structures or a bottom-level acceleration structure containing either a set
of axis-aligned bounding boxes for custom geometry or a set of triangles.

Each instance in the top-level acceleration structure contains a reference
to a bottom-level acceleration structure as well as an instance transform
plus information required to index into the shader bindings.
The top-level acceleration structure is what is bound to the acceleration
descriptor, for example to trace inside the shader in the ray tracing
pipeline.

Acceleration structures are represented by sname:VkAccelerationStructureKHR
handles:

include::{generated}/api/handles/VkAccelerationStructureKHR.txt[]
--

ifdef::VK_NV_ray_tracing[]

[open,refpage='VkAccelerationStructureNV',desc='Opaque handle to an acceleration structure object',type='handles']
--
:refpage: VkAccelerationStructureNV

Acceleration structures for the VK_NV_ray_tracing extension are represented
by the similar sname:VkAccelerationStructureNV handles:

include::{generated}/api/handles/VkAccelerationStructureNV.txt[]
--

[open,refpage='vkCreateAccelerationStructureNV',desc='Create a new acceleration structure object',type='protos']
--
:refpage: vkCreateAccelerationStructureNV

To create acceleration structures, call:

include::{generated}/api/protos/vkCreateAccelerationStructureNV.txt[]

  * pname:device is the logical device that creates the buffer object.
  * pname:pCreateInfo is a pointer to a
    slink:VkAccelerationStructureCreateInfoNV structure containing
    parameters affecting creation of the acceleration structure.
  * pname:pAllocator controls host memory allocation as described in the
    <<memory-allocation, Memory Allocation>> chapter.
  * pname:pAccelerationStructure is a pointer to a
    slink:VkAccelerationStructureNV handle in which the resulting
    acceleration structure object is returned.

Similar to other objects in Vulkan, the acceleration structure creation
merely creates an object with a specific "`shape`" as specified by the
information in slink:VkAccelerationStructureInfoNV and pname:compactedSize
in pname:pCreateInfo.
Populating the data in the object after allocating and binding memory is
done with flink:vkCmdBuildAccelerationStructureNV and
flink:vkCmdCopyAccelerationStructureNV.

Acceleration structure creation uses the count and type information from the
geometries, but does not use the data references in the structures.

include::{generated}/validity/protos/vkCreateAccelerationStructureNV.txt[]
--

[open,refpage='VkAccelerationStructureCreateInfoNV',desc='Structure specifying the parameters of a newly created acceleration structure object',type='structs']
--
:refpage: VkAccelerationStructureCreateInfoNV

The sname:VkAccelerationStructureCreateInfoNV structure is defined as:

include::{generated}/api/structs/VkAccelerationStructureCreateInfoNV.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:compactedSize is the size from the result of
    flink:vkCmdWriteAccelerationStructuresPropertiesNV if this acceleration
    structure is going to be the target of a compacting copy.
  * pname:info is the slink:VkAccelerationStructureInfoNV structure
    specifying further parameters of the created acceleration structure.

.Valid Usage
****
  * [[VUID-VkAccelerationStructureCreateInfoNV-compactedSize-02421]]
    If pname:compactedSize is not `0` then both pname:info.geometryCount and
    pname:info.instanceCount must: be `0`
****

include::{generated}/validity/structs/VkAccelerationStructureCreateInfoNV.txt[]
--

[open,refpage='VkAccelerationStructureInfoNV',desc='Structure specifying the parameters of acceleration structure object',type='structs']
--
:refpage: VkAccelerationStructureInfoNV

The sname:VkAccelerationStructureInfoNV structure is defined as:

include::{generated}/api/structs/VkAccelerationStructureInfoNV.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:type is a elink:VkAccelerationStructureTypeNV value specifying the
    type of acceleration structure that will be created.
  * pname:flags is a bitmask of elink:VkBuildAccelerationStructureFlagBitsNV
    specifying additional parameters of the acceleration structure.
  * pname:instanceCount specifies the number of instances that will be in
    the new acceleration structure.
  * pname:geometryCount specifies the number of geometries that will be in
    the new acceleration structure.
  * pname:pGeometries is a pointer to an array of pname:geometryCount
    slink:VkGeometryNV structures containing the scene data being passed
    into the acceleration structure.

sname:VkAccelerationStructureInfoNV contains information that is used both
for acceleration structure creation with
flink:vkCreateAccelerationStructureNV and in combination with the actual
geometric data to build the acceleration structure with
flink:vkCmdBuildAccelerationStructureNV.

.Valid Usage
****
  * [[VUID-VkAccelerationStructureInfoNV-geometryCount-02422]]
    pname:geometryCount must: be less than or equal to
    slink:VkPhysicalDeviceRayTracingPropertiesNV::pname:maxGeometryCount
  * [[VUID-VkAccelerationStructureInfoNV-instanceCount-02423]]
    pname:instanceCount must: be less than or equal to
    slink:VkPhysicalDeviceRayTracingPropertiesNV::pname:maxInstanceCount
  * [[VUID-VkAccelerationStructureInfoNV-maxTriangleCount-02424]]
    The total number of triangles in all geometries must: be less than or
    equal to
    slink:VkPhysicalDeviceRayTracingPropertiesNV::pname:maxTriangleCount
  * [[VUID-VkAccelerationStructureInfoNV-type-02425]]
    If pname:type is ename:VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV then
    pname:geometryCount must: be `0`
  * [[VUID-VkAccelerationStructureInfoNV-type-02426]]
    If pname:type is ename:VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV
    then pname:instanceCount must: be `0`
  * [[VUID-VkAccelerationStructureInfoNV-type-02786]]
    If pname:type is ename:VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV
    then the pname:geometryType member of each geometry in pname:pGeometries
    must: be the same
  * [[VUID-VkAccelerationStructureInfoNV-flags-02592]]
    If pname:flags has the
    ename:VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV bit set,
    then it must: not have the
    ename:VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV bit set
  * [[VUID-VkAccelerationStructureInfoNV-scratch-02781]]
    pname:scratch must: have been created with
    ename:VK_BUFFER_USAGE_RAY_TRACING_BIT_NV usage flag
  * [[VUID-VkAccelerationStructureInfoNV-instanceData-02782]]
    If pname:instanceData is not dlink:VK_NULL_HANDLE, pname:instanceData
    must: have been created with ename:VK_BUFFER_USAGE_RAY_TRACING_BIT_NV
    usage flag
****

include::{generated}/validity/structs/VkAccelerationStructureInfoNV.txt[]
--

endif::VK_NV_ray_tracing[]

ifdef::VK_KHR_acceleration_structure[]
[open,refpage='vkCreateAccelerationStructureKHR',desc='Create a new acceleration structure object',type='protos']
--
:refpage: vkCreateAccelerationStructureKHR

To create an acceleration structure, call:

include::{generated}/api/protos/vkCreateAccelerationStructureKHR.txt[]

  * pname:device is the logical device that creates the acceleration
    structure object.
  * pname:pCreateInfo is a pointer to a
    slink:VkAccelerationStructureCreateInfoKHR structure containing
    parameters affecting creation of the acceleration structure.
  * pname:pAllocator controls host memory allocation as described in the
    <<memory-allocation, Memory Allocation>> chapter.
  * pname:pAccelerationStructure is a pointer to a
    sname:VkAccelerationStructureKHR handle in which the resulting
    acceleration structure object is returned.

Similar to other objects in Vulkan, the acceleration structure creation
merely creates an object with a specific "`shape`".
The type and quantity of geometry that can be built into an acceleration
structure is determined by the parameters of
slink:VkAccelerationStructureCreateInfoKHR.

Populating the data in the object after allocating and binding memory is
done with commands such as flink:vkCmdBuildAccelerationStructuresKHR,
flink:vkBuildAccelerationStructuresKHR,
flink:vkCmdCopyAccelerationStructureKHR, and
flink:vkCopyAccelerationStructureKHR.

The input buffers passed to acceleration structure build commands will be
referenced by the implementation for the duration of the command.
After the command completes, the acceleration structure may: hold a
reference to any acceleration structure specified by an active instance
contained therein.
Apart from this referencing, acceleration structures must: be fully
self-contained.
The application may: re-use or free any memory which was used by the command
as an input or as scratch without affecting the results of ray traversal.

.Valid Usage
****
  * [[VUID-vkCreateAccelerationStructureKHR-accelerationStructure-03611]]
    The <<features-accelerationStructure, pname:accelerationStructure>>
    feature must: be enabled
  * [[VUID-vkCreateAccelerationStructureKHR-deviceAddress-03488]]
    If slink:VkAccelerationStructureCreateInfoKHR::pname:deviceAddress is
    not zero, the
    <<features-accelerationStructureCaptureReplay,pname:accelerationStructureCaptureReplay>>
    feature must: be enabled
  * [[VUID-vkCreateAccelerationStructureKHR-device-03489]]
    If pname:device was created with multiple physical devices, then the
    <<features-bufferDeviceAddressMultiDevice,bufferDeviceAddressMultiDevice>>
    feature must: be enabled
****

include::{generated}/validity/protos/vkCreateAccelerationStructureKHR.txt[]
--

[open,refpage='VkAccelerationStructureCreateInfoKHR',desc='Structure specifying the parameters of a newly created acceleration structure object',type='structs']
--
:refpage: VkAccelerationStructureCreateInfoKHR

The sname:VkAccelerationStructureCreateInfoKHR structure is defined as:

include::{generated}/api/structs/VkAccelerationStructureCreateInfoKHR.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:createFlags is a bitmask of
    elink:VkAccelerationStructureCreateFlagBitsKHR specifying additional
    creation parameters of the acceleration structure.
  * pname:buffer is the buffer on which the acceleration structure will be
    stored.
  * pname:offset is an offset in bytes from the base address of the buffer
    at which the acceleration structure will be stored, and must: be a
    multiple of `256`.
  * pname:size is the size required for the acceleration structure.
  * pname:type is a elink:VkAccelerationStructureTypeKHR value specifying
    the type of acceleration structure that will be created.
  * pname:deviceAddress is the device address requested for the acceleration
    structure if the <<features-accelerationStructureCaptureReplay,
    pname:accelerationStructureCaptureReplay>> feature is being used.

If pname:deviceAddress is zero, no specific address is requested.

If pname:deviceAddress is not zero, pname:deviceAddress must: be an address
retrieved from an identically created acceleration structure on the same
implementation.
The acceleration structure must: also be placed on an identically created
pname:buffer and at the same pname:offset.

Applications should: avoid creating acceleration structures with
application-provided addresses and implementation-provided addresses in the
same process, to reduce the likelihood of
ename:VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR errors.

[NOTE]
.Note
====
The expected usage for this is that a trace capture/replay tool will add the
ename:VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT flag to all buffers
that use ename:VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT, and
ename:VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT to all buffers used as
storage for an acceleration structure where pname:deviceAddress is not zero.
During capture the tool will save the queried opaque device addresses in the
trace.
During replay, the buffers will be created specifying the original address
so any address values stored in the trace data will remain valid.

Implementations are expected to separate such buffers in the GPU address
space so normal allocations will avoid using these addresses.
Apps/tools should avoid mixing app-provided and implementation-provided
addresses for buffers created with
ename:VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, to avoid address
space allocation conflicts.
====


Applications should: create an acceleration structure with a specific
elink:VkAccelerationStructureTypeKHR other than
ename:VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR.

If the acceleration structure will be the target of a build operation, the
required size for an acceleration structure can: be queried with
flink:vkGetAccelerationStructureBuildSizesKHR.
If the acceleration structure is going to be the target of a compacting
copy, flink:vkCmdWriteAccelerationStructuresPropertiesKHR or
flink:vkWriteAccelerationStructuresPropertiesKHR can: be used to obtain the
compacted size required.

.Valid Usage
****
  * [[VUID-VkAccelerationStructureCreateInfoKHR-deviceAddress-03612]]
    If pname:deviceAddress is not zero, pname:createFlags must: include
    ename:VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
  * [[VUID-VkAccelerationStructureCreateInfoKHR-createFlags-03613]]
    If pname:createFlags includes
    ename:VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR,
    slink:VkPhysicalDeviceAccelerationStructureFeaturesKHR::pname:accelerationStructureCaptureReplay
    must: be ename:VK_TRUE
  * [[VUID-VkAccelerationStructureCreateInfoKHR-buffer-03614]]
    pname:buffer must: have been created with a pname:usage value containing
    ename:VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR
  * [[VUID-VkAccelerationStructureCreateInfoKHR-buffer-03615]]
    pname:buffer must: not have been created with
    ename:VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT
  * [[VUID-VkAccelerationStructureCreateInfoKHR-offset-03616]]
    The sum of pname:offset and pname:size must: be less than the size of
    pname:buffer
  * [[VUID-VkAccelerationStructureCreateInfoKHR-offset-03734]]
    pname:offset must: be a multiple of `256` bytes
****

include::{generated}/validity/structs/VkAccelerationStructureCreateInfoKHR.txt[]
--

[open,refpage='vkGetAccelerationStructureBuildSizesKHR',desc='Retrieve the required size for an acceleration structure',type='protos']
--
:refpage: vkGetAccelerationStructureBuildSizesKHR

To get the build sizes for an acceleration structure, call:

include::{generated}/api/protos/vkGetAccelerationStructureBuildSizesKHR.txt[]

  * pname:device is the logical device that will be used for creating the
    acceleration structure.
  * pname:buildType defines whether host or device operations (or both) are
    being queried for.
  * pname:pBuildInfo is a pointer to a
    slink:VkAccelerationStructureBuildGeometryInfoKHR structure describing
    parameters of a build operation.
  * pname:pMaxPrimitiveCounts is a pointer to an array of
    pname:pBuildInfo->geometryCount code:uint32_t values defining the number
    of primitives built into each geometry.
  * pname:pSizeInfo is a pointer to a
    slink:VkAccelerationStructureBuildSizesInfoKHR structure which returns
    the size required for an acceleration structure and the sizes required
    for the scratch buffers, given the build parameters.

The pname:srcAccelerationStructure, pname:dstAccelerationStructure, and
pname:mode members of pname:pBuildInfo are ignored.
Any slink:VkDeviceOrHostAddressKHR members of pname:pBuildInfo are ignored
by this command, except that the pname:hostAddress member of
slink:VkAccelerationStructureGeometryTrianglesDataKHR::pname:transformData
will be examined to check if it is `NULL`.

An acceleration structure created with the pname:accelerationStructureSize
returned by this command supports any build or update with a
slink:VkAccelerationStructureBuildGeometryInfoKHR structure and array of
slink:VkAccelerationStructureBuildRangeInfoKHR structures subject to the
following properties:

  * The build command is a host build command, and pname:buildType is
    ename:VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR or
    ename:VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR
  * The build command is a device build command, and pname:buildType is
    ename:VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR or
    ename:VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR
  * For slink:VkAccelerationStructureBuildGeometryInfoKHR:
  ** Its pname:type, and pname:flags members are equal to those specified in
     pname:pBuildInfo.
  ** pname:geometryCount is less than or equal to that specified in
     pname:pBuildInfo.
  ** For each element of either pname:pGeometries or pname:ppGeometries at a
     given index, its pname:geometryType member is equal to that specified
     in pname:pBuildInfo.
  ** For each element of either pname:pGeometries or pname:ppGeometries at a
     given index, with a pname:geometryType member equal to
     ename:VK_GEOMETRY_TYPE_TRIANGLES_KHR, the pname:vertexFormat and
     pname:indexType members of pname:geometry.triangles are equal to those
     specified in the same element in pname:pBuildInfo.
  ** For each element of either pname:pGeometries or pname:ppGeometries at a
     given index, with a pname:geometryType member equal to
     ename:VK_GEOMETRY_TYPE_TRIANGLES_KHR, the pname:maxVertex member of
     pname:geometry.triangles is less than or equal to that specified in the
     same element in pname:pBuildInfo.
  ** For each element of either pname:pGeometries or pname:ppGeometries at a
     given index, with a pname:geometryType member equal to
     ename:VK_GEOMETRY_TYPE_TRIANGLES_KHR, if the applicable address in the
     pname:transformData member of pname:geometry.triangles is not `NULL`,
     the corresponding pname:transformData.pname:hostAddress parameter in
     pname:pBuildInfo is not `NULL`.
  * For each slink:VkAccelerationStructureBuildRangeInfoKHR corresponding to
    the slink:VkAccelerationStructureBuildGeometryInfoKHR:
  ** Its pname:primitiveCount member is less than or equal to the
     corresponding element of pname:pMaxPrimitiveCounts.

Similarly, the pname:updateScratchSize value will support any build command
specifying the ename:VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR
pname:mode under the above conditions, and the pname:buildScratchSize value
will support any build command specifying the
ename:VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR pname:mode under the
above conditions.

.Valid Usage
****
  * [[VUID-vkGetAccelerationStructureBuildSizesKHR-rayTracingPipeline-03617]]
    The <<features-rayTracingPipeline, pname:rayTracingPipeline>> or
    <<features-rayQuery, pname:rayQuery>> feature must: be enabled
  * [[VUID-vkGetAccelerationStructureBuildSizesKHR-device-03618]]
    If pname:device was created with multiple physical devices, then the
    <<features-bufferDeviceAddressMultiDevice,bufferDeviceAddressMultiDevice>>
    feature must: be enabled
  * [[VUID-vkGetAccelerationStructureBuildSizesKHR-pBuildInfo-03619]]
    If pname:pBuildInfo->geometryCount is not `0`, pname:pMaxPrimitiveCounts
    must: be a valid pointer to an array of pname:pBuildInfo->geometryCount
    code:uint32_t values
  * [[VUID-vkGetAccelerationStructureBuildSizesKHR-pBuildInfo-03785]]
    If pname:pBuildInfo->pGeometries or pname:pBuildInfo->ppGeometries has a
    pname:geometryType of ename:VK_GEOMETRY_TYPE_INSTANCES_KHR, each
    pname:pMaxPrimitiveCounts[i] must: be less than or equal to
    slink:VkPhysicalDeviceAccelerationStructurePropertiesKHR::pname:maxInstanceCount
****

include::{generated}/validity/protos/vkGetAccelerationStructureBuildSizesKHR.txt[]
--

[open,refpage='VkAccelerationStructureBuildSizesInfoKHR',desc='Structure specifying build sizes for an acceleration structure',type='structs']
--
:refpage: VkAccelerationStructureBuildSizesInfoKHR

The sname:VkAccelerationStructureBuildSizesInfoKHR structure describes the
required build sizes for an acceleration structure and scratch buffers and
is defined as:

include::{generated}/api/structs/VkAccelerationStructureBuildSizesInfoKHR.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:accelerationStructureSize is the size in bytes required in a
    slink:VkAccelerationStructureKHR for a build or update operation.
  * pname:updateScratchSize is the size in bytes required in a scratch
    buffer for an update operation.
  * pname:buildScratchSize is the size in bytes required in a scratch buffer
    for a build operation.

include::{generated}/validity/structs/VkAccelerationStructureBuildSizesInfoKHR.txt[]
--


endif::VK_KHR_acceleration_structure[]

[open,refpage='VkAccelerationStructureTypeKHR',desc='Type of acceleration structure',type='enums',alias='VkAccelerationStructureTypeNV']
--
:refpage: VkAccelerationStructureTypeKHR

Values which can: be set in
ifdef::VK_KHR_acceleration_structure[]
slink:VkAccelerationStructureCreateInfoKHR::pname:type
endif::VK_KHR_acceleration_structure[]
ifdef::VK_KHR_acceleration_structure+VK_NV_ray_tracing[or]
ifdef::VK_NV_ray_tracing[]
slink:VkAccelerationStructureInfoNV::pname:type
endif::VK_NV_ray_tracing[]
specifying the type of acceleration structure, are:

include::{generated}/api/enums/VkAccelerationStructureTypeKHR.txt[]

ifdef::VK_NV_ray_tracing[]
or the equivalent

include::{generated}/api/enums/VkAccelerationStructureTypeNV.txt[]
endif::VK_NV_ray_tracing[]

  * ename:VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR is a top-level
    acceleration structure containing instance data referring to
    bottom-level acceleration structures.
  * ename:VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR is a bottom-level
    acceleration structure containing the AABBs or geometry to be
    intersected.
  * ename:VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR is an acceleration
    structure whose type is determined at build time used for special
    circumstances.

--

ifdef::VK_KHR_acceleration_structure[]
[open,refpage='VkAccelerationStructureCreateFlagBitsKHR',desc='Bitmask specifying additional creation parameters for acceleration structure',type='enums']
--

Bits which can: be set in
slink:VkAccelerationStructureCreateInfoKHR::pname:createFlags specifying
additional creation parameters for acceleration structures, are:

include::{generated}/api/enums/VkAccelerationStructureCreateFlagBitsKHR.txt[]

  * ename:VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR
    specifies that the acceleration structure's address can: be saved and
    reused on a subsequent run.
--

[open,refpage='VkAccelerationStructureCreateFlagsKHR',desc='Bitmask of VkAccelerationStructureCreateFlagBitsKHR',type='flags']
--
include::{generated}/api/flags/VkAccelerationStructureCreateFlagsKHR.txt[]

tname:VkAccelerationStructureCreateFlagsKHR is a bitmask type for setting a
mask of zero or more elink:VkAccelerationStructureCreateFlagBitsKHR.
--
endif::VK_KHR_acceleration_structure[]

[open,refpage='VkBuildAccelerationStructureFlagBitsKHR',desc='Bitmask specifying additional parameters for acceleration structure builds',type='enums',alias='VkBuildAccelerationStructureFlagBitsNV']
--
:refpage: VkBuildAccelerationStructureFlagBitsKHR

Bits which can: be set in
ifdef::VK_KHR_acceleration_structure[]
slink:VkAccelerationStructureBuildGeometryInfoKHR::pname:flags
endif::VK_KHR_acceleration_structure[]
ifdef::VK_KHR_acceleration_structure+VK_NV_ray_tracing[or]
ifdef::VK_NV_ray_tracing[]
slink:VkAccelerationStructureInfoNV::pname:flags
endif::VK_NV_ray_tracing[]
specifying additional parameters for acceleration structure builds, are:

include::{generated}/api/enums/VkBuildAccelerationStructureFlagBitsKHR.txt[]

ifdef::VK_NV_ray_tracing[]
or the equivalent

include::{generated}/api/enums/VkBuildAccelerationStructureFlagBitsNV.txt[]
endif::VK_NV_ray_tracing[]

  * ename:VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR indicates
    that the specified acceleration structure can: be updated with
    pname:update of ename:VK_TRUE in
ifdef::VK_KHR_acceleration_structure[]
flink:vkCmdBuildAccelerationStructuresKHR
endif::VK_KHR_acceleration_structure[]
ifdef::VK_KHR_acceleration_structure+VK_NV_ray_tracing[or]
ifdef::VK_NV_ray_tracing[]
flink:vkCmdBuildAccelerationStructureNV
endif::VK_NV_ray_tracing[]
    .
  * ename:VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR indicates
    that the specified acceleration structure can: act as the source for a
    copy acceleration structure command with pname:mode of
    ename:VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR to produce a
    compacted acceleration structure.
  * ename:VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR
    indicates that the given acceleration structure build should: prioritize
    trace performance over build time.
  * ename:VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR
    indicates that the given acceleration structure build should: prioritize
    build time over trace performance.
  * ename:VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR indicates that
    this acceleration structure should: minimize the size of the scratch
    memory and the final result build, potentially at the expense of build
    time or trace performance.

[NOTE]
.Note
====
ename:VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR and
ename:VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR may: take
more time and memory than a normal build, and so should: only be used when
those features are needed.
====
--

[open,refpage='VkBuildAccelerationStructureFlagsKHR',desc='Bitmask of VkBuildAccelerationStructureFlagBitsKHR',type='flags',alias='VkBuildAccelerationStructureFlagsNV']
--
:refpage: VkBuildAccelerationStructureFlagsKHR

include::{generated}/api/flags/VkBuildAccelerationStructureFlagsKHR.txt[]

ifdef::VK_NV_ray_tracing[]
or the equivalent

include::{generated}/api/flags/VkBuildAccelerationStructureFlagsNV.txt[]
endif::VK_NV_ray_tracing[]

tname:VkBuildAccelerationStructureFlagsKHR is a bitmask type for setting a
mask of zero or more elink:VkBuildAccelerationStructureFlagBitsKHR.
--

ifdef::VK_NV_ray_tracing[]
[open,refpage='VkGeometryNV',desc='Structure specifying a geometry in a bottom-level acceleration structure',type='structs']
--
:refpage: VkGeometryNV

The sname:VkGeometryNV structure describes geometry in a bottom-level
acceleration structure and is defined as:

include::{generated}/api/structs/VkGeometryNV.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:geometryType specifies the elink:VkGeometryTypeKHR which this
    geometry refers to.
  * pname:geometry contains the geometry data as described in
    slink:VkGeometryDataNV.
  * pname:flags has elink:VkGeometryFlagBitsKHR describing options for this
    geometry.

.Valid Usage
****
  * [[VUID-VkGeometryNV-geometryType-03503]]
    pname:geometryType must: be ename:VK_GEOMETRY_TYPE_TRIANGLES_NV or
    ename:VK_GEOMETRY_TYPE_AABBS_NV
****

include::{generated}/validity/structs/VkGeometryNV.txt[]
--
endif::VK_NV_ray_tracing[]

[open,refpage='VkGeometryTypeKHR',desc='Enum specifying which type of geometry is provided',type='enums',alias='VkGeometryTypeNV']
--
:refpage: VkGeometryTypeKHR

Geometry types are specified by elink:VkGeometryTypeKHR, which takes values:

include::{generated}/api/enums/VkGeometryTypeKHR.txt[]

ifdef::VK_NV_ray_tracing[]
or the equivalent

include::{generated}/api/enums/VkGeometryTypeNV.txt[]
endif::VK_NV_ray_tracing[]

  * ename:VK_GEOMETRY_TYPE_TRIANGLES_KHR specifies a geometry type
    consisting of triangles.
  * ename:VK_GEOMETRY_TYPE_AABBS_KHR specifies a geometry type consisting of
    axis-aligned bounding boxes.
ifdef::VK_KHR_acceleration_structure[]
  * ename:VK_GEOMETRY_TYPE_INSTANCES_KHR specifies a geometry type
    consisting of acceleration structure instances.
endif::VK_KHR_acceleration_structure[]
--

[open,refpage='VkGeometryFlagBitsKHR',desc='Bitmask specifying additional parameters for a geometry',type='enums',alias='VkGeometryFlagBitsNV']
--
:refpage: VkGeometryFlagBitsKHR

Bits specifying additional parameters for geometries in acceleration
structure builds, are:

include::{generated}/api/enums/VkGeometryFlagBitsKHR.txt[]

ifdef::VK_NV_ray_tracing[]
or the equivalent

include::{generated}/api/enums/VkGeometryFlagBitsNV.txt[]
endif::VK_NV_ray_tracing[]

  * ename:VK_GEOMETRY_OPAQUE_BIT_KHR indicates that this geometry does not
    invoke the any-hit shaders even if present in a hit group.
  * ename:VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR indicates that
    the implementation must: only call the any-hit shader a single time for
    each primitive in this geometry.
    If this bit is absent an implementation may: invoke the any-hit shader
    more than once for this geometry.

--

[open,refpage='VkGeometryFlagsKHR',desc='Bitmask of VkGeometryFlagBitsKHR',type='flags',alias='VkGeometryFlagsNV']
--
:refpage: VkGeometryFlagsKHR

include::{generated}/api/flags/VkGeometryFlagsKHR.txt[]

ifdef::VK_NV_ray_tracing[]
or the equivalent

include::{generated}/api/flags/VkGeometryFlagsNV.txt[]
endif::VK_NV_ray_tracing[]

tname:VkGeometryFlagsKHR is a bitmask type for setting a mask of zero or
more elink:VkGeometryFlagBitsKHR.
--

ifdef::VK_NV_ray_tracing[]
[open,refpage='VkGeometryDataNV',desc='Structure specifying geometry in a bottom-level acceleration structure',type='structs']
--
:refpage: VkGeometryDataNV

The sname:VkGeometryDataNV structure specifes geometry in a bottom-level
acceleration structure and is defined as:

include::{generated}/api/structs/VkGeometryDataNV.txt[]

  * pname:triangles contains triangle data if
    slink:VkGeometryNV::pname:geometryType is
    ename:VK_GEOMETRY_TYPE_TRIANGLES_NV.
  * pname:aabbs contains axis-aligned bounding box data if
    slink:VkGeometryNV::pname:geometryType is
    ename:VK_GEOMETRY_TYPE_AABBS_NV.

include::{generated}/validity/structs/VkGeometryDataNV.txt[]
--

[open,refpage='VkGeometryTrianglesNV',desc='Structure specifying a triangle geometry in a bottom-level acceleration structure',type='structs']
--
:refpage: VkGeometryTrianglesNV

The sname:VkGeometryTrianglesNV structure specifies triangle geometry in a
bottom-level acceleration structure and is defined as:

include::{generated}/api/structs/VkGeometryTrianglesNV.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:vertexData is the buffer containing vertex data for this geometry.
  * pname:vertexOffset is the offset in bytes within pname:vertexData
    containing vertex data for this geometry.
  * pname:vertexCount is the number of valid vertices.
  * pname:vertexStride is the stride in bytes between each vertex.
  * pname:vertexFormat is a elink:VkFormat describing the format of each
    vertex element.
  * pname:indexData is the buffer containing index data for this geometry.
  * pname:indexOffset is the offset in bytes within pname:indexData
    containing index data for this geometry.
  * pname:indexCount is the number of indices to include in this geometry.
  * pname:indexType is a elink:VkIndexType describing the format of each
    index.
  * pname:transformData is an optional buffer containing an
    slink:VkTransformMatrixNV structure defining a transformation to be
    applied to this geometry.
  * pname:transformOffset is the offset in bytes in pname:transformData of
    the transform information described above.

If pname:indexType is ename:VK_INDEX_TYPE_NONE_NV, then this structure
describes a set of triangles determined by pname:vertexCount.
Otherwise, this structure describes a set of indexed triangles determined by
pname:indexCount.

.Valid Usage
****
  * [[VUID-VkGeometryTrianglesNV-vertexOffset-02428]]
    pname:vertexOffset must: be less than the size of pname:vertexData
  * [[VUID-VkGeometryTrianglesNV-vertexOffset-02429]]
    pname:vertexOffset must: be a multiple of the component size of
    pname:vertexFormat
  * [[VUID-VkGeometryTrianglesNV-vertexFormat-02430]]
    pname:vertexFormat must: be one of ename:VK_FORMAT_R32G32B32_SFLOAT,
    ename:VK_FORMAT_R32G32_SFLOAT, ename:VK_FORMAT_R16G16B16_SFLOAT,
    ename:VK_FORMAT_R16G16_SFLOAT, ename:VK_FORMAT_R16G16_SNORM, or
    ename:VK_FORMAT_R16G16B16_SNORM
  * [[VUID-VkGeometryTrianglesNV-vertexStride-03818]]
    pname:vertexStride must: be less than or equal to [eq]#2^32^-1#
  * [[VUID-VkGeometryTrianglesNV-indexOffset-02431]]
    pname:indexOffset must: be less than the size of pname:indexData
  * [[VUID-VkGeometryTrianglesNV-indexOffset-02432]]
    pname:indexOffset must: be a multiple of the element size of
    pname:indexType
  * [[VUID-VkGeometryTrianglesNV-indexType-02433]]
    pname:indexType must: be ename:VK_INDEX_TYPE_UINT16,
    ename:VK_INDEX_TYPE_UINT32, or ename:VK_INDEX_TYPE_NONE_NV
  * [[VUID-VkGeometryTrianglesNV-indexData-02434]]
    pname:indexData must: be dlink:VK_NULL_HANDLE if pname:indexType is
    ename:VK_INDEX_TYPE_NONE_NV
  * [[VUID-VkGeometryTrianglesNV-indexData-02435]]
    pname:indexData must: be a valid sname:VkBuffer handle if
    pname:indexType is not ename:VK_INDEX_TYPE_NONE_NV
  * [[VUID-VkGeometryTrianglesNV-indexCount-02436]]
    pname:indexCount must: be `0` if pname:indexType is
    ename:VK_INDEX_TYPE_NONE_NV
  * [[VUID-VkGeometryTrianglesNV-transformOffset-02437]]
    pname:transformOffset must: be less than the size of pname:transformData
  * [[VUID-VkGeometryTrianglesNV-transformOffset-02438]]
    pname:transformOffset must: be a multiple of `16`
****

include::{generated}/validity/structs/VkGeometryTrianglesNV.txt[]
--

[open,refpage='VkGeometryAABBNV',desc='Structure specifying axis-aligned bounding box geometry in a bottom-level acceleration structure',type='structs']
--
:refpage: VkGeometryAABBNV

The sname:VkGeometryAABBNV structure specifies axis-aligned bounding box
geometry in a bottom-level acceleration structure, and is defined as:

include::{generated}/api/structs/VkGeometryAABBNV.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:aabbData is the buffer containing axis-aligned bounding box data.
  * pname:numAABBs is the number of AABBs in this geometry.
  * pname:stride is the stride in bytes between AABBs in pname:aabbData.
  * pname:offset is the offset in bytes of the first AABB in pname:aabbData.

The AABB data in memory is six 32-bit floats consisting of the minimum x, y,
and z values followed by the maximum x, y, and z values.

.Valid Usage
****
  * [[VUID-VkGeometryAABBNV-offset-02439]]
    pname:offset must: be less than the size of pname:aabbData
  * [[VUID-VkGeometryAABBNV-offset-02440]]
    pname:offset must: be a multiple of `8`
  * [[VUID-VkGeometryAABBNV-stride-02441]]
    pname:stride must: be a multiple of `8`
****

include::{generated}/validity/structs/VkGeometryAABBNV.txt[]
--
endif::VK_NV_ray_tracing[]

[open,refpage='vkDestroyAccelerationStructureKHR',desc='Destroy an acceleration structure object',type='protos']
--
:refpage: vkDestroyAccelerationStructureKHR

To destroy an acceleration structure, call:

ifdef::VK_KHR_acceleration_structure[]
include::{generated}/api/protos/vkDestroyAccelerationStructureKHR.txt[]
endif::VK_KHR_acceleration_structure[]

  * pname:device is the logical device that destroys the buffer.
  * pname:accelerationStructure is the acceleration structure to destroy.
  * pname:pAllocator controls host memory allocation as described in the
    <<memory-allocation, Memory Allocation>> chapter.

.Valid Usage
****
  * [[VUID-vkDestroyAccelerationStructureKHR-accelerationStructure-02442]]
    All submitted commands that refer to pname:accelerationStructure must:
    have completed execution
  * [[VUID-vkDestroyAccelerationStructureKHR-accelerationStructure-02443]]
    If sname:VkAllocationCallbacks were provided when
    pname:accelerationStructure was created, a compatible set of callbacks
    must: be provided here
  * [[VUID-vkDestroyAccelerationStructureKHR-accelerationStructure-02444]]
    If no sname:VkAllocationCallbacks were provided when
    pname:accelerationStructure was created, pname:pAllocator must: be
    `NULL`
****

include::{generated}/validity/protos/vkDestroyAccelerationStructureKHR.txt[]
--

ifdef::VK_NV_ray_tracing[]

[open,refpage='vkDestroyAccelerationStructureNV',desc='Destroy an acceleration structure object',type='protos']
--
:refpage: vkDestroyAccelerationStructureNV

To destroy an acceleration structure, call:

include::{generated}/api/protos/vkDestroyAccelerationStructureNV.txt[]

  * pname:device is the logical device that destroys the buffer.
  * pname:accelerationStructure is the acceleration structure to destroy.
  * pname:pAllocator controls host memory allocation as described in the
    <<memory-allocation, Memory Allocation>> chapter.

.Valid Usage
****
  * [[VUID-vkDestroyAccelerationStructureNV-accelerationStructure-03752]]
    All submitted commands that refer to pname:accelerationStructure must:
    have completed execution
  * [[VUID-vkDestroyAccelerationStructureNV-accelerationStructure-03753]]
    If sname:VkAllocationCallbacks were provided when
    pname:accelerationStructure was created, a compatible set of callbacks
    must: be provided here
  * [[VUID-vkDestroyAccelerationStructureNV-accelerationStructure-03754]]
    If no sname:VkAllocationCallbacks were provided when
    pname:accelerationStructure was created, pname:pAllocator must: be
    `NULL`
****

include::{generated}/validity/protos/vkDestroyAccelerationStructureNV.txt[]
--


[open,refpage='vkGetAccelerationStructureMemoryRequirementsNV',desc='Get acceleration structure memory requirements',type='protos']
--
:refpage: vkGetAccelerationStructureMemoryRequirementsNV

An acceleration structure has memory requirements for the structure object
itself, scratch space for the build, and scratch space for the update.

Scratch space is allocated as a sname:VkBuffer, so for
ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV
and
ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV
the pname:pMemoryRequirements->alignment and
pname:pMemoryRequirements->memoryTypeBits values returned by this call must:
be filled with zero, and should: be ignored by the application.

To query the memory requirements call:

include::{generated}/api/protos/vkGetAccelerationStructureMemoryRequirementsNV.txt[]

  * pname:device is the logical device on which the acceleration structure
    was created.
  * pname:pInfo specifies the acceleration structure to get memory
    requirements for.
  * pname:pMemoryRequirements returns the requested acceleration structure
    memory requirements.

include::{generated}/validity/protos/vkGetAccelerationStructureMemoryRequirementsNV.txt[]
--

[open,refpage='VkAccelerationStructureMemoryRequirementsInfoNV',desc='Structure specifying acceleration to query for memory requirements',type='structs']
--
:refpage: VkAccelerationStructureMemoryRequirementsInfoNV

The sname:VkAccelerationStructureMemoryRequirementsInfoNV structure is
defined as:

include::{generated}/api/structs/VkAccelerationStructureMemoryRequirementsInfoNV.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:type selects the type of memory requirement being queried.
    ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV
    returns the memory requirements for the object itself.
    ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV
    returns the memory requirements for the scratch memory when doing a
    build.
    ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV
    returns the memory requirements for the scratch memory when doing an
    update.
  * pname:accelerationStructure is the acceleration structure to be queried
    for memory requirements.

include::{generated}/validity/structs/VkAccelerationStructureMemoryRequirementsInfoNV.txt[]
--

[open,refpage='VkAccelerationStructureMemoryRequirementsTypeNV',desc='Acceleration structure memory requirement type',type='enums']
--
:refpage: VkAccelerationStructureMemoryRequirementsTypeNV

Possible values of pname:type in
sname:VkAccelerationStructureMemoryRequirementsInfoNV are:,

include::{generated}/api/enums/VkAccelerationStructureMemoryRequirementsTypeNV.txt[]

  * ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV
    requests the memory requirement for the sname:VkAccelerationStructureNV
    backing store.
  * ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV
    requests the memory requirement for scratch space during the initial
    build.
  * ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV
    requests the memory requirement for scratch space during an update.

--
endif::VK_NV_ray_tracing[]

ifdef::VK_KHR_acceleration_structure[]
[open,refpage='VkAccelerationStructureBuildTypeKHR',desc='Acceleration structure build type',type='enums']
--
:refpage: VkAccelerationStructureBuildTypeKHR

Possible values of pname:buildType in
flink:vkGetAccelerationStructureBuildSizesKHR are:

include::{generated}/api/enums/VkAccelerationStructureBuildTypeKHR.txt[]

  * ename:VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR requests the memory
    requirement for operations performed by the host.
  * ename:VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR requests the
    memory requirement for operations performed by the device.
  * ename:VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR requests
    the memory requirement for operations performed by either the host, or
    the device.

--

endif::VK_KHR_acceleration_structure[]

ifdef::VK_NV_ray_tracing[]
[open,refpage='vkBindAccelerationStructureMemoryNV',desc='Bind acceleration structure memory',type='protos']
--
:refpage: vkBindAccelerationStructureMemoryNV

To attach memory to one or more acceleration structures at a time, call:

include::{generated}/api/protos/vkBindAccelerationStructureMemoryNV.txt[]

  * pname:device is the logical device that owns the acceleration structures
    and memory.
  * pname:bindInfoCount is the number of elements in pname:pBindInfos.
  * pname:pBindInfos is a pointer to an array of
    slink:VkBindAccelerationStructureMemoryInfoNV structures describing
    acceleration structures and memory to bind.

include::{generated}/validity/protos/vkBindAccelerationStructureMemoryNV.txt[]
--

[open,refpage='VkBindAccelerationStructureMemoryInfoNV',desc='Structure specifying acceleration structure memory binding',type='structs']
--
:refpage: VkBindAccelerationStructureMemoryInfoNV

The sname:VkBindAccelerationStructureMemoryInfoNV structure is defined as:

include::{generated}/api/structs/VkBindAccelerationStructureMemoryInfoNV.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:accelerationStructure is the acceleration structure to be attached
    to memory.
  * pname:memory is a sname:VkDeviceMemory object describing the device
    memory to attach.
  * pname:memoryOffset is the start offset of the region of memory that is
    to be bound to the acceleration structure.
    The number of bytes returned in the
    slink:VkMemoryRequirements::pname:size member in pname:memory, starting
    from pname:memoryOffset bytes, will be bound to the specified
    acceleration structure.
  * pname:deviceIndexCount is the number of elements in
    pname:pDeviceIndices.
  * pname:pDeviceIndices is a pointer to an array of device indices.

.Valid Usage
****
  * [[VUID-VkBindAccelerationStructureMemoryInfoNV-accelerationStructure-03620]]
    pname:accelerationStructure must: not already be backed by a memory
    object
  * [[VUID-VkBindAccelerationStructureMemoryInfoNV-memoryOffset-03621]]
    pname:memoryOffset must: be less than the size of pname:memory
  * [[VUID-VkBindAccelerationStructureMemoryInfoNV-memory-03622]]
    pname:memory must: have been allocated using one of the memory types
    allowed in the pname:memoryTypeBits member of the
    slink:VkMemoryRequirements structure returned from a call to
    flink:vkGetAccelerationStructureMemoryRequirementsNV with
    pname:accelerationStructure and pname:type of
    ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV
  * [[VUID-VkBindAccelerationStructureMemoryInfoNV-memoryOffset-03623]]
    pname:memoryOffset must: be an integer multiple of the pname:alignment
    member of the slink:VkMemoryRequirements structure returned from a call
    to flink:vkGetAccelerationStructureMemoryRequirementsNV with
    pname:accelerationStructure and pname:type of
    ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV
  * [[VUID-VkBindAccelerationStructureMemoryInfoNV-size-03624]]
    The pname:size member of the sname:VkMemoryRequirements structure
    returned from a call to
    flink:vkGetAccelerationStructureMemoryRequirementsNV with
    pname:accelerationStructure and pname:type of
    ename:VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV must:
    be less than or equal to the size of pname:memory minus
    pname:memoryOffset
****

include::{generated}/validity/structs/VkBindAccelerationStructureMemoryInfoNV.txt[]
--
endif::VK_NV_ray_tracing[]


ifdef::VK_NV_ray_tracing[]
[open,refpage='vkGetAccelerationStructureHandleNV',desc='Get opaque acceleration structure handle',type='protos']
--
:refpage: vkGetAccelerationStructureHandleNV

To allow constructing geometry instances with device code if desired, we
need to be able to query a opaque handle for an acceleration structure.
This handle is a value of 8 bytes.
To get this handle, call:

include::{generated}/api/protos/vkGetAccelerationStructureHandleNV.txt[]

  * pname:device is the logical device that owns the acceleration
    structures.
  * pname:accelerationStructure is the acceleration structure.
  * pname:dataSize is the size in bytes of the buffer pointed to by
    pname:pData.
  * pname:pData is a pointer to a user-allocated buffer where the results
    will be written.

.Valid Usage
****
  * [[VUID-vkGetAccelerationStructureHandleNV-dataSize-02240]]
    pname:dataSize must: be large enough to contain the result of the query,
    as described above
  * [[VUID-vkGetAccelerationStructureHandleNV-accelerationStructure-02787]]
    pname:accelerationStructure must: be bound completely and contiguously
    to a single sname:VkDeviceMemory object via
    flink:vkBindAccelerationStructureMemoryNV
****

include::{generated}/validity/protos/vkGetAccelerationStructureHandleNV.txt[]
--
endif::VK_NV_ray_tracing[]

ifdef::VK_KHR_acceleration_structure[]
[open,refpage='vkGetAccelerationStructureDeviceAddressKHR',desc='Query an address of a acceleration structure',type='protos']
--
:refpage: vkGetAccelerationStructureDeviceAddressKHR

To query the 64-bit device address for an acceleration structure, call:

include::{generated}/api/protos/vkGetAccelerationStructureDeviceAddressKHR.txt[]

  * pname:device is the logical device that the accelerationStructure was
    created on.
  * pname:pInfo is a pointer to a
    slink:VkAccelerationStructureDeviceAddressInfoKHR structure specifying
    the acceleration structure to retrieve an address for.

The 64-bit return value is an address of the acceleration structure, which
can be used for device and shader operations that involve acceleration
structures, such as
ifdef::VK_KHR_ray_tracing_pipeline,VK_KHR_ray_query[]
ray traversal and
endif::VK_KHR_ray_tracing_pipeline,VK_KHR_ray_query[]
acceleration structure building.

If the acceleration structure was created with a non-zero value of
slink:VkAccelerationStructureCreateInfoKHR::pname:deviceAddress the return
value will be the same address.

If the acceleration structure was created with a pname:type of
ename:VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR the returned address must:
be consistent with the relative offset to other acceleration structures of
pname:type of ename:VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR allocated
with the same slink:VkBuffer.
That is, the difference in returned addresses between the two must: be the
same as the difference in offsets provided at acceleration structure
creation.

[NOTE]
.Note
====
The acceleration structure device address may: be different from the buffer
device address corresponding to the acceleration structure's start offset in
its storage buffer for acceleration structure types other than
ename:VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR.
====

.Valid Usage
****
  * [[VUID-vkGetAccelerationStructureDeviceAddressKHR-device-03504]]
    If pname:device was created with multiple physical devices, then the
    <<features-bufferDeviceAddressMultiDevice,bufferDeviceAddressMultiDevice>>
    feature must: be enabled
****

include::{generated}/validity/protos/vkGetAccelerationStructureDeviceAddressKHR.txt[]
--

[open,refpage='VkAccelerationStructureDeviceAddressInfoKHR',desc='Structure specifying the acceleration structure to query an address for',type='structs']
--
:refpage: VkAccelerationStructureDeviceAddressInfoKHR

The sname:VkAccelerationStructureDeviceAddressInfoKHR structure is defined
as:

include::{generated}/api/structs/VkAccelerationStructureDeviceAddressInfoKHR.txt[]

  * pname:sType is the type of this structure.
  * pname:pNext is `NULL` or a pointer to a structure extending this
    structure.
  * pname:accelerationStructure specifies the acceleration structure whose
    address is being queried.

include::{generated}/validity/structs/VkAccelerationStructureDeviceAddressInfoKHR.txt[]
--
endif::VK_KHR_acceleration_structure[]
