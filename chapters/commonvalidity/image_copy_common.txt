// Copyright (c) 2020 The Khronos Group Inc.
//
// SPDX-License-Identifier: CC-BY-4.0

// Common Valid Usage
// Common to VkImageCopy* struct
ifndef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
  * [[VUID-{refpage}-aspectMask-00137]]
    The pname:aspectMask member of pname:srcSubresource and
    pname:dstSubresource must: match
endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
  * [[VUID-{refpage}-srcImage-01551]]
    If neither the calling command's pname:srcImage nor the calling
    command's pname:dstImage has a
    <<formats-requiring-sampler-ycbcr-conversion, multi-planar image
    format>> then the pname:aspectMask member of pname:srcSubresource and
    pname:dstSubresource must: match
  * [[VUID-{refpage}-srcImage-01552]]
    If the calling command's pname:srcImage has a elink:VkFormat with
    <<formats-requiring-sampler-ycbcr-conversion,two planes>> then the
    pname:srcSubresource pname:aspectMask must: be
    ename:VK_IMAGE_ASPECT_PLANE_0_BIT or ename:VK_IMAGE_ASPECT_PLANE_1_BIT
  * [[VUID-{refpage}-srcImage-01553]]
    If the calling command's pname:srcImage has a elink:VkFormat with
    <<formats-requiring-sampler-ycbcr-conversion,three planes>> then the
    pname:srcSubresource pname:aspectMask must: be
    ename:VK_IMAGE_ASPECT_PLANE_0_BIT, ename:VK_IMAGE_ASPECT_PLANE_1_BIT, or
    ename:VK_IMAGE_ASPECT_PLANE_2_BIT
  * [[VUID-{refpage}-dstImage-01554]]
    If the calling command's pname:dstImage has a elink:VkFormat with
    <<formats-requiring-sampler-ycbcr-conversion,two planes>> then the
    pname:dstSubresource pname:aspectMask must: be
    ename:VK_IMAGE_ASPECT_PLANE_0_BIT or ename:VK_IMAGE_ASPECT_PLANE_1_BIT
  * [[VUID-{refpage}-dstImage-01555]]
    If the calling command's pname:dstImage has a elink:VkFormat with
    <<formats-requiring-sampler-ycbcr-conversion,three planes>> then the
    pname:dstSubresource pname:aspectMask must: be
    ename:VK_IMAGE_ASPECT_PLANE_0_BIT, ename:VK_IMAGE_ASPECT_PLANE_1_BIT, or
    ename:VK_IMAGE_ASPECT_PLANE_2_BIT
  * [[VUID-{refpage}-srcImage-01556]]
    If the calling command's pname:srcImage has a
    <<formats-requiring-sampler-ycbcr-conversion,multi-planar image format>>
    and the pname:dstImage does not have a multi-planar image format, the
    pname:dstSubresource pname:aspectMask must: be
    ename:VK_IMAGE_ASPECT_COLOR_BIT
  * [[VUID-{refpage}-dstImage-01557]]
    If the calling command's pname:dstImage has a
    <<formats-requiring-sampler-ycbcr-conversion,multi-planar image format>>
    and the pname:srcImage does not have a multi-planar image format, the
    pname:srcSubresource pname:aspectMask must: be
    ename:VK_IMAGE_ASPECT_COLOR_BIT
endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
ifndef::VK_VERSION_1_1,VK_KHR_maintenance1[]
  * [[VUID-{refpage}-layerCount-00138]]
    The pname:layerCount member of pname:srcSubresource and
    pname:dstSubresource must: match
  * [[VUID-{refpage}-srcImage-00139]]
    If either of the calling command's pname:srcImage or pname:dstImage
    parameters are of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the
    pname:baseArrayLayer and pname:layerCount members of both
    pname:srcSubresource and pname:dstSubresource must: be `0` and `1`,
    respectively
endif::VK_VERSION_1_1,VK_KHR_maintenance1[]
ifdef::VK_VERSION_1_1,VK_KHR_maintenance1[]
  * [[VUID-{refpage}-extent-00140]]
    The number of slices of the pname:extent (for 3D) or layers of the
    pname:srcSubresource (for non-3D) must: match the number of slices of
    the pname:extent (for 3D) or layers of the pname:dstSubresource (for
    non-3D)
  * [[VUID-{refpage}-srcImage-00141]]
    If either of the calling command's pname:srcImage or pname:dstImage
    parameters are of elink:VkImageType ename:VK_IMAGE_TYPE_3D, the
    pname:baseArrayLayer and pname:layerCount members of the corresponding
    subresource must: be `0` and `1`, respectively
endif::VK_VERSION_1_1,VK_KHR_maintenance1[]
  * [[VUID-{refpage}-aspectMask-00142]]
    The pname:aspectMask member of pname:srcSubresource must: specify
    aspects present in the calling command's pname:srcImage
  * [[VUID-{refpage}-aspectMask-00143]]
    The pname:aspectMask member of pname:dstSubresource must: specify
    aspects present in the calling command's pname:dstImage
  * [[VUID-{refpage}-srcOffset-00144]]
    pname:srcOffset.x and [eq]#(pname:extent.width {plus}
    pname:srcOffset.x)# must: both be greater than or equal to `0` and less
    than or equal to the source image subresource width
  * [[VUID-{refpage}-srcOffset-00145]]
    pname:srcOffset.y and [eq]#(pname:extent.height {plus}
    pname:srcOffset.y)# must: both be greater than or equal to `0` and less
    than or equal to the source image subresource height
  * [[VUID-{refpage}-srcImage-00146]]
    If the calling command's pname:srcImage is of type
    ename:VK_IMAGE_TYPE_1D, then pname:srcOffset.y must: be `0` and
    pname:extent.height must: be `1`
  * [[VUID-{refpage}-srcOffset-00147]]
    pname:srcOffset.z and [eq]#(pname:extent.depth {plus}
    pname:srcOffset.z)# must: both be greater than or equal to `0` and less
    than or equal to the source image subresource depth
  * [[VUID-{refpage}-srcImage-01785]]
    If the calling command's pname:srcImage is of type
    ename:VK_IMAGE_TYPE_1D, then pname:srcOffset.z must: be `0` and
    pname:extent.depth must: be `1`
  * [[VUID-{refpage}-dstImage-01786]]
    If the calling command's pname:dstImage is of type
    ename:VK_IMAGE_TYPE_1D, then pname:dstOffset.z must: be `0` and
    pname:extent.depth must: be `1`
  * [[VUID-{refpage}-srcImage-01787]]
    If the calling command's pname:srcImage is of type
    ename:VK_IMAGE_TYPE_2D, then pname:srcOffset.z must: be `0`
  * [[VUID-{refpage}-dstImage-01788]]
    If the calling command's pname:dstImage is of type
    ename:VK_IMAGE_TYPE_2D, then pname:dstOffset.z must: be `0`
ifndef::VK_VERSION_1_1,VK_KHR_maintenance1[]
  * [[VUID-{refpage}-srcImage-01789]]
    If the calling command's pname:srcImage or pname:dstImage is of type
    ename:VK_IMAGE_TYPE_2D, then pname:extent.depth must: be `1`
endif::VK_VERSION_1_1,VK_KHR_maintenance1[]
ifdef::VK_VERSION_1_1,VK_KHR_maintenance1[]
  * [[VUID-{refpage}-srcImage-01790]]
    If both pname:srcImage and pname:dstImage are of type
    ename:VK_IMAGE_TYPE_2D then pname:extent.depth must: be `1`
  * [[VUID-{refpage}-srcImage-01791]]
    If the calling command's pname:srcImage is of type
    ename:VK_IMAGE_TYPE_2D, and the pname:dstImage is of type
    ename:VK_IMAGE_TYPE_3D, then pname:extent.depth must: equal to the
    pname:layerCount member of pname:srcSubresource
  * [[VUID-{refpage}-dstImage-01792]]
    If the calling command's pname:dstImage is of type
    ename:VK_IMAGE_TYPE_2D, and the pname:srcImage is of type
    ename:VK_IMAGE_TYPE_3D, then pname:extent.depth must: equal to the
    pname:layerCount member of pname:dstSubresource
endif::VK_VERSION_1_1,VK_KHR_maintenance1[]
  * [[VUID-{refpage}-dstOffset-00150]]
    pname:dstOffset.x and [eq]#(pname:extent.width {plus}
    pname:dstOffset.x)# must: both be greater than or equal to `0` and less
    than or equal to the destination image subresource width
  * [[VUID-{refpage}-dstOffset-00151]]
    pname:dstOffset.y and [eq]#(pname:extent.height {plus}
    pname:dstOffset.y)# must: both be greater than or equal to `0` and less
    than or equal to the destination image subresource height
  * [[VUID-{refpage}-dstImage-00152]]
    If the calling command's pname:dstImage is of type
    ename:VK_IMAGE_TYPE_1D, then pname:dstOffset.y must: be `0` and
    pname:extent.height must: be `1`
  * [[VUID-{refpage}-dstOffset-00153]]
    pname:dstOffset.z and [eq]#(pname:extent.depth {plus}
    pname:dstOffset.z)# must: both be greater than or equal to `0` and less
    than or equal to the destination image subresource depth
// The block of VU below come in alternate versions when the extension is
// enabled.
ifndef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
  * [[VUID-{refpage}-srcOffset-00157]]
    If the calling command's pname:srcImage is a compressed image, all
    members of pname:srcOffset must: be a multiple of the corresponding
    dimensions of the compressed texel block
  * [[VUID-{refpage}-extent-00158]]
    If the calling command's pname:srcImage is a compressed image,
    pname:extent.width must: be a multiple of the compressed texel block
    width or [eq]#(pname:extent.width {plus} pname:srcOffset.x)# must: equal
    the source image subresource width
  * [[VUID-{refpage}-extent-00159]]
    If the calling command's pname:srcImage is a compressed image,
    pname:extent.height must: be a multiple of the compressed texel block
    height or [eq]#(pname:extent.height {plus} pname:srcOffset.y)# must:
    equal the source image subresource height
  * [[VUID-{refpage}-extent-00160]]
    If the calling command's pname:srcImage is a compressed image,
    pname:extent.depth must: be a multiple of the compressed texel block
    depth or [eq]#(pname:extent.depth {plus} pname:srcOffset.z)# must: equal
    the source image subresource depth
  * [[VUID-{refpage}-dstOffset-00162]]
    If the calling command's pname:dstImage is a compressed format image,
    all members of pname:dstOffset must: be a multiple of the corresponding
    dimensions of the compressed texel block
  * [[VUID-{refpage}-extent-00163]]
    If the calling command's pname:dstImage is a compressed format image,
    pname:extent.width must: be a multiple of the compressed texel block
    width or [eq]#(pname:extent.width {plus} pname:dstOffset.x)# must: equal
    the destination image subresource width
  * [[VUID-{refpage}-extent-00164]]
    If the calling command's pname:dstImage is a compressed format image,
    pname:extent.height must: be a multiple of the compressed texel block
    height or [eq]#(pname:extent.height {plus} pname:dstOffset.y)# must:
    equal the destination image subresource height
  * [[VUID-{refpage}-extent-00165]]
    If the calling command's pname:dstImage is a compressed format image,
    pname:extent.depth must: be a multiple of the compressed texel block
    depth or [eq]#(pname:extent.depth {plus} pname:dstOffset.z)# must: equal
    the destination image subresource depth
endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
// The nested ifdefs are there in anticipation of the hoped-for day when the
// VU extractor and validation layers can handle VU with imbedded
// conditionals. They are commented out until then.
ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
  * [[VUID-{refpage}-srcImage-01727]]
    If the calling command's pname:srcImage is a compressed image,
// ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    or a _single-plane_, "`etext:_422`" image format,
// endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    all members of pname:srcOffset must: be a multiple of the corresponding
    dimensions of the compressed texel block
  * [[VUID-{refpage}-srcImage-01728]]
    If the calling command's pname:srcImage is a compressed image,
// ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    or a _single-plane_, "`etext:_422`" image format,
// endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    pname:extent.width must: be a multiple of the compressed texel block
    width or [eq]#(pname:extent.width {plus} pname:srcOffset.x)# must: equal
    the source image subresource width
  * [[VUID-{refpage}-srcImage-01729]]
    If the calling command's pname:srcImage is a compressed image,
// ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    or a _single-plane_, "`etext:_422`" image format,
// endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    pname:extent.height must: be a multiple of the compressed texel block
    height or [eq]#(pname:extent.height {plus} pname:srcOffset.y)# must:
    equal the source image subresource height
  * [[VUID-{refpage}-srcImage-01730]]
    If the calling command's pname:srcImage is a compressed image,
// ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    or a _single-plane_, "`etext:_422`" image format,
// endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    pname:extent.depth must: be a multiple of the compressed texel block
    depth or [eq]#(pname:extent.depth {plus} pname:srcOffset.z)# must: equal
    the source image subresource depth
  * [[VUID-{refpage}-dstImage-01731]]
    If the calling command's pname:dstImage is a compressed format image,
// ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    or a _single-plane_, "`etext:_422`" image format,
// endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    all members of pname:dstOffset must: be a multiple of the corresponding
    dimensions of the compressed texel block
  * [[VUID-{refpage}-dstImage-01732]]
    If the calling command's pname:dstImage is a compressed format image,
// ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    or a _single-plane_, "`etext:_422`" image format,
// endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    pname:extent.width must: be a multiple of the compressed texel block
    width or [eq]#(pname:extent.width {plus} pname:dstOffset.x)# must: equal
    the destination image subresource width
  * [[VUID-{refpage}-dstImage-01733]]
    If the calling command's pname:dstImage is a compressed format image,
// ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    or a _single-plane_, "`etext:_422`" image format,
// endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    pname:extent.height must: be a multiple of the compressed texel block
    height or [eq]#(pname:extent.height {plus} pname:dstOffset.y)# must:
    equal the destination image subresource height
  * [[VUID-{refpage}-dstImage-01734]]
    If the calling command's pname:dstImage is a compressed format image,
// ifdef::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    or a _single-plane_, "`etext:_422`" image format,
// endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
    pname:extent.depth must: be a multiple of the compressed texel block
    depth or [eq]#(pname:extent.depth {plus} pname:dstOffset.z)# must: equal
    the destination image subresource depth
endif::VK_VERSION_1_1,VK_KHR_sampler_ycbcr_conversion[]
// Common Valid Usage
