// Copyright (c) 2021 The Khronos Group Inc.
//
// SPDX-License-Identifier: CC-BY-4.0

include::{generated}/meta/{refprefix}VK_ARM_rasterization_order_attachment_access.txt[]

=== Other Extension Metadata

*Last Modified Date*::
    2021-11-12
*IP Status*::
    No known IP claims.
*Contributors*::
    - Tobias Hector, AMD
    - Jan-Harald Fredriksen, Arm

=== Description

Renderpasses, and specifically
<<synchronization-pipeline-barriers-subpass-self-dependencies, subpass
self-dependencies>> enable much of the same functionality as the framebuffer
fetch and pixel local storage extensions did for OpenGL ES.
But certain techniques such as programmable blending are awkward or
impractical to implement with these alone, in part because a self-dependency
is required every time a fragment will read a value at a given sample
coordinate.

This extension extends the mechanism of input attachments to allow access to
framebuffer attachments when used as both input and color, or depth/stencil,
attachments from one fragment to the next, in rasterization order, without
explicit synchronization.

See <<renderpass-feedbackloop, renderpass feedback loops>> for more
information.

include::{generated}/interfaces/VK_ARM_rasterization_order_attachment_access.txt[]

=== Issues

1) Is there any interaction with the `apiext:VK_KHR_dynamic_rendering`
extension?

No.
This extension only affects reads from input attachments.
Render pass instances begun with flink:vkCmdBeginRenderingKHR do not have
input attachments and a different mechanism will be needed to provide
similar functionality in this case.

=== Examples

None.

=== Version History

    * Revision 1, 2021-11-12 (Jan-Harald Fredriksen)
        - Initial draft
