// Copyright 2021 The Khronos Group Inc.
//
// SPDX-License-Identifier: CC-BY-4.0

include::{generated}/meta/{refprefix}VK_EXT_raster_multisamples.txt[]

=== Other Extension Metadata

*Last Modified Date*::
    2021-11-18
*IP Status*::
    No known IP claims.
*Contributors*::
  - Jonathan Weinstein, VMware

=== Description

Under certain conditions, this extension allows a specific "raster-multisample"
mode of rendering where
slink:VkPipelineMultisampleStateCreateInfo::pname:rasterizationSamples is >= 2
(up to 16 is useful) and single-sample color attachment(s) are present. This
enables more pixels along the edges of primitives to be shaded and the fragment
shader can use the builtin input SampleMask as a way to determine how covered
they are. A use case for this is anti-aliased path rendering.

For specified pipelines, rasterization, the builtin Input SampleMask and
centroid interpolation are all based on the rasterizationSamples pattern.
A pixel is a candidate for shading when any rasterizer sample within the pixel
is considered covered.

With the assumption that ename:VK_COVERAGE_REDUCTION_MODE_MERGE_NV behaves identical
to the above for the case of a single color sample, this extension could be
considered a restricted subset of `apiext:VK_NV_framebuffer_mixed_samples` and requires
that no depth/stencil attachment is present and most depth/stencil state to be
disabled.

To use raster-multisample mode, an application must set
ename:VK_PIPELINE_MULTISAMPLE_STATE_CREATE_RASTER_MULTISAMPLE_BIT_EXT in
sname:VkPipelineMultisampleStateCreateInfo::pname::flags. This flag can only
be present when the subpass has single-sample color attachment(s) and the other
conditions are met.

No form of variable rate shading from `apiext:from VK_KHR_fragment_shading_rate`
is allowed in conjunction with this feature.

How any queries of type ename:VK_QUERY_TYPE_OCCLUSION increment during draws
with this mode is implementation-defined and may be zero through
pname:rasterizationSamples for each fragment.

include::{generated}/interfaces/VK_EXT_raster_multisamples.txt[]

=== Issues

1) Why does ename:VK_PIPELINE_MULTISAMPLE_STATE_CREATE_RASTER_MULTISAMPLE_BIT_EXT
exist?

*RESOLVED*: Otherwise there would be an ambiguity when
`apiext:VK_AMD_mixed_attachment_samples` is enabled. Also, since the flag can only
be present under stricter than usual conditions, it may be a small convenience
to implementors by not having to look at both the multisample create info and
subpass info. Validation language can also be a bit shorter.

2) Could any ambiguities instead be resolved by adding a new
VkCoverageReductionModeNV enum value?

*PROPOSED*: Probably, but the reason for not doing so are:

 * Querying support via vkGetPhysicalDeviceProperties2 for a specific case
is simpler than using
vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV would.

 * Extending elink:VkPipelineMultisampleStateCreateFlagBits doesn't add much extra
work since the flag field already exists in the MSAA create info. It is likely
that no current implementors even check for a
sname:VkPipelineCoverageReductionStateCreateInfoNV since they only seem to support
one of the two existing modes. Implementors supporting
`apiext:VK_NV_framebuffer_mixed_samples` and not `apiext:VK_AMD_mixed_attachment_samples`
can probably ignore the new
ename:VK_PIPELINE_MULTISAMPLE_STATE_CREATE_RASTER_MULTISAMPLE_BIT_EXT flag entirely.

 * The spec doesn't say anything about `apiext:VK_NV_coverage_reduction_mode` by itself
allowing any form of mixed samples. `apiext:VK_NV_coverage_reduction_mode` also says
it requires `apiext:VK_NV_framebuffer_mixed_samples`, which can't be supported by
most vendors without a way to specify what combinations are allowed; the
requirement seems backwards? Maybe this could be amended by changing various
parts of the spec, but the proposed flag and
sname:VkPhysicalDeviceRasterMultisampleFeaturesEXT structure are simple and convenient
for this extension's specific use case.

=== Version History

 * Revision 1, 2021-11-18 (Jonathan Weinstein)
   - Initial version
