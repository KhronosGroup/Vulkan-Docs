// Copyright 2022 The Khronos Group Inc.
//
// SPDX-License-Identifier: CC-BY-4.0

include::{generated}/meta/{refprefix}VK_FOOL_printed_surface.txt[]

=== Other Extension Metadata

*Last Modified Date*::
    2022-03-18
*IP Status*::
    No known IP claims.
*Contributors*::
  - Joshua Ashton, printedsurface.ink
  - Liam Middlebrook, printedsurface.ink

=== Description

Bringing Vulkan to the workplace.

include::{generated}/interfaces/VK_FOOL_printed_surface.txt[]

=== Issues

Tons of them.

1) What vendor string should be used for this extension?

*RESOLVED*: FOOL; as to create a very clear note that this is an April Fools
            joke and not affiliated in any way with our day-to-day work in the
            Vulkan ecosystem through our employeers.

2) What should this extension be named?

*RESOLVED*: VK_*_printed_surface, to ensure that we don't box ourselves in on
            the medium that the swapchain images are being printed onto.


3) Should this extension be made platform specific by introducing a dependency on CUPS?

*RESOLVED*: No, for too long printers have been overlooked in graphics APIs
            without a clear method of standardization. VK_FOOL_printed_surface
            aims to close this massive gap in the ecosystem by providing the first
            extension to bring a standardized cross-platform printing API to
            the Vulkan specification.

4) Fax machines share similar base functionality with printers. Will they be supported by this extension?

*RESOLVED*: Yes, although only for their printing capacity. Implementations
            may: choose to provide out-of-API options for setting up fax-based
            communication, or help to specify an additional extension
            introducing more robust Fax support.

5) Printers are inherintly complex devices which are not yet fully understood
   by humanity, does the current set of error codes available in Vulkan allow
   for implementations to adequately express the various states of disarray
   encountered when a print is not successful?


6) Will this extension support printers with limited character set support,
   such as teleprinters?


7) Typicaly swapchain image count requirements are subject to presentation
   hardware and are queried at initialization-time. Will this conflict with the
   reality of dwindling page count?


8) Why would someone want to see a printed frame?

*RESOLVED*: This is a stupid question. For thousands of years humanity has
            pursued artistic passion and looked to immortalize their creations.
            This pursuit obviously extends to the printed frame.


9) Pre-existing surface implementations would account for surfaceFormat which
   is confusingly names as it actually represnts the surface color format,
   rather than the medium of the presentation surface itself. Will this
   extesnion carry that precedent in light of mulitple supported types of
   surface medium? ie: Paper, cardboard, fabric


10) Is elongated swapchain backpressure from image acquisition a concern for
    the practicality of apps wishing to implement this extension?


11) How will duplex printing be handled?


12) Should this extension specify features available in high-end printers such as autmatic stapling and hole punching?


13) Will priority in the print queue be handled by this extension?

*RESOLVED*: Please wait for the VK_FOOL_print_queue_priority extension.


14) Will this extension support printing "zoom levels"? Possibly allowing multiple presented images to appear on a single page?


15) Are print color profiles covered under the scope of this extension?


16) Why are you doing this?


17) How does this extension interact with partial present?


18) How does this extension interact with overlay layers (such as MangoHUD)?


19) How will this extension interact with HDR images?


20) Is this a serious extension?

*RESOLVED*: No, why? Do you want it to be?


21) Will this extension allow for enumeration of printers (similar to VK_KHR_display), or leave enumeration up to the application and use OS-API native handles (similar to other WSI surface extensions)?

*RESOLVED*: In order to provide a consistent development experience, a printer
            enumeration API will be provided.


22) Will the extension support tearing?

*RESOLVED*: No. The printed surface will only support perfect prints. Tearing is left to the end-user.


=== Version History

  * Revision 5, 2022-03-29 (Liam Middlebrook)
    - Fix XML build warnings
    - Fill out Devices and Queues: Printer chapter.

  * Revision 4, 2022-03-25 (Joshua Ashton)
    - Address tearing issue

  * Revision 3, 2022-03-25 (Joshua Ashton)
    - Add printer features
    - Add printer object type

  * Revision 2, 2022-03-22 (Liam Middlebrook)
    - Add printer enumeration
    - Minor fixes
    - Stub out chapters

  * Revision 1, 2022-03-18 (Liam Middlebrook)
    - Initial draft


=== Final Thoughts

Please consider the environment before printing this extension.
